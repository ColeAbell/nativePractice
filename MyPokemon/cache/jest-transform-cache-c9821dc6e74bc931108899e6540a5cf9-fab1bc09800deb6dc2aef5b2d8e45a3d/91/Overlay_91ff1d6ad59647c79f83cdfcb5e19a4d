2bfcf65180adc4e81598b35711a79090
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Overlay = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Overlay = function Overlay(_a) {
  var children = _a.children,
    backdropStyle = _a.backdropStyle,
    overlayStyle = _a.overlayStyle,
    onBackdropPress = _a.onBackdropPress,
    fullScreen = _a.fullScreen,
    _a$ModalComponent = _a.ModalComponent,
    ModalComponent = _a$ModalComponent === void 0 ? _reactNative.Modal : _a$ModalComponent,
    isVisible = _a.isVisible,
    rest = __rest(_a, ["children", "backdropStyle", "overlayStyle", "onBackdropPress", "fullScreen", "ModalComponent", "isVisible"]);
  return (0, _jsxRuntime.jsxs)(ModalComponent, Object.assign({
    visible: isVisible,
    onRequestClose: onBackdropPress,
    transparent: true
  }, rest, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
      onPress: onBackdropPress,
      testID: "RNE__Overlay__backdrop",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        testID: "backdrop",
        style: _reactNative.StyleSheet.flatten([styles.backdrop, backdropStyle])
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      pointerEvents: "box-none",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.overlay, fullScreen && styles.fullscreen, overlayStyle]),
        children: children
      })
    })]
  }));
};
exports.Overlay = Overlay;
Overlay.defaultProps = {
  fullScreen: false,
  onBackdropPress: function onBackdropPress() {
    return null;
  },
  ModalComponent: _reactNative.Modal
};
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, .4)'
  },
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  fullscreen: {
    width: '100%',
    height: '100%'
  },
  overlay: Object.assign({
    backgroundColor: 'white',
    borderRadius: 3,
    padding: 10
  }, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0, 0, 0, .3)',
      shadowOffset: {
        width: 0,
        height: 1
      },
      shadowRadius: 4
    }
  }))
});
var _default = (0, _config.withTheme)(Overlay, 'Overlay');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk92ZXJsYXkiLCJfYSIsImNoaWxkcmVuIiwiYmFja2Ryb3BTdHlsZSIsIm92ZXJsYXlTdHlsZSIsIm9uQmFja2Ryb3BQcmVzcyIsImZ1bGxTY3JlZW4iLCJNb2RhbENvbXBvbmVudCIsIk1vZGFsIiwiaXNWaXNpYmxlIiwicmVzdCIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwiYmFja2Ryb3AiLCJjb250YWluZXIiLCJvdmVybGF5IiwiZnVsbHNjcmVlbiIsImRlZmF1bHRQcm9wcyIsImNyZWF0ZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiYmFja2dyb3VuZENvbG9yIiwiZmxleCIsImFzc2lnbiIsImJvcmRlclJhZGl1cyIsInBhZGRpbmciLCJQbGF0Zm9ybSIsInNlbGVjdCIsImFuZHJvaWQiLCJlbGV2YXRpb24iLCJkZWZhdWx0Iiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJzaGFkb3dSYWRpdXMiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJPdmVybGF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0LCBQbGF0Zm9ybSwgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLCBNb2RhbCwgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmNvbnN0IE92ZXJsYXkgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBjaGlsZHJlbiwgYmFja2Ryb3BTdHlsZSwgb3ZlcmxheVN0eWxlLCBvbkJhY2tkcm9wUHJlc3MsIGZ1bGxTY3JlZW4sIE1vZGFsQ29tcG9uZW50ID0gTW9kYWwsIGlzVmlzaWJsZSB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCIsIFwiYmFja2Ryb3BTdHlsZVwiLCBcIm92ZXJsYXlTdHlsZVwiLCBcIm9uQmFja2Ryb3BQcmVzc1wiLCBcImZ1bGxTY3JlZW5cIiwgXCJNb2RhbENvbXBvbmVudFwiLCBcImlzVmlzaWJsZVwiXSk7XG4gICAgcmV0dXJuICg8TW9kYWxDb21wb25lbnQgdmlzaWJsZT17aXNWaXNpYmxlfSBvblJlcXVlc3RDbG9zZT17b25CYWNrZHJvcFByZXNzfSB0cmFuc3BhcmVudCB7Li4ucmVzdH0+XG4gICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBvblByZXNzPXtvbkJhY2tkcm9wUHJlc3N9IHRlc3RJRD1cIlJORV9fT3ZlcmxheV9fYmFja2Ryb3BcIj5cbiAgICAgIDxWaWV3IHRlc3RJRD1cImJhY2tkcm9wXCIgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmJhY2tkcm9wLCBiYWNrZHJvcFN0eWxlXSl9Lz5cbiAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cblxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfSBwb2ludGVyRXZlbnRzPVwiYm94LW5vbmVcIj5cbiAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLm92ZXJsYXksXG4gICAgICAgICAgICBmdWxsU2NyZWVuICYmIHN0eWxlcy5mdWxsc2NyZWVuLFxuICAgICAgICAgICAgb3ZlcmxheVN0eWxlLFxuICAgICAgICBdKX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+XG4gIDwvTW9kYWxDb21wb25lbnQ+KTtcbn07XG5PdmVybGF5LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBmdWxsU2NyZWVuOiBmYWxzZSxcbiAgICBvbkJhY2tkcm9wUHJlc3M6ICgpID0+IG51bGwsXG4gICAgTW9kYWxDb21wb25lbnQ6IE1vZGFsLFxufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBiYWNrZHJvcDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAuNCknLFxuICAgIH0sXG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgfSxcbiAgICBmdWxsc2NyZWVuOiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgIH0sXG4gICAgb3ZlcmxheTogT2JqZWN0LmFzc2lnbih7IGJhY2tncm91bmRDb2xvcjogJ3doaXRlJywgYm9yZGVyUmFkaXVzOiAzLCBwYWRkaW5nOiAxMCB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgICBlbGV2YXRpb246IDIsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAuMyknLFxuICAgICAgICAgICAgc2hhZG93T2Zmc2V0OiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDEgfSxcbiAgICAgICAgICAgIHNoYWRvd1JhZGl1czogNCxcbiAgICAgICAgfSxcbiAgICB9KSksXG59KTtcbmV4cG9ydCB7IE92ZXJsYXkgfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShPdmVybGF5LCAnT3ZlcmxheScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBQXNDO0FBYnRDLElBQUlBLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFD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