4a3631223a71c4ec6e3aef62696ac6c8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Image = _interopRequireDefault(require("../image/Image"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Accessory = function Accessory(_a) {
  var _a$size = _a.size,
    size = _a$size === void 0 ? 10 : _a$size,
    style = _a.style,
    _a$underlayColor = _a.underlayColor,
    underlayColor = _a$underlayColor === void 0 ? '#000' : _a$underlayColor,
    onPress = _a.onPress,
    onLongPress = _a.onLongPress,
    source = _a.source,
    props = __rest(_a, ["size", "style", "underlayColor", "onPress", "onLongPress", "source"]);
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, {
    style: [styles.accessory, {
      width: size,
      height: size,
      borderRadius: size / 2
    }, style],
    underlayColor: underlayColor,
    onPress: onPress,
    onLongPress: onLongPress,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: source ? (0, _jsxRuntime.jsx)(_Image.default, Object.assign({
        source: source,
        style: {
          width: size,
          height: size,
          borderRadius: size / 2
        }
      }, props)) : (0, _jsxRuntime.jsx)(_Icon.default, Object.assign({
        name: "mode-edit",
        type: "material",
        color: "#fff",
        size: size * 0.8
      }, props))
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  accessory: Object.assign({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});
var _default = (0, _config.withTheme)(Accessory, 'AvatarAccessory');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFjY2Vzc29yeSIsIl9hIiwic2l6ZSIsInN0eWxlIiwidW5kZXJsYXlDb2xvciIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsInNvdXJjZSIsInByb3BzIiwic3R5bGVzIiwiYWNjZXNzb3J5Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYXNzaWduIiwicG9zaXRpb24iLCJib3R0b20iLCJyaWdodCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImJhY2tncm91bmRDb2xvciIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImRlZmF1bHQiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsInNoYWRvd1JhZGl1cyIsInNoYWRvd09wYWNpdHkiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJBY2Nlc3NvcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRvdWNoYWJsZUhpZ2hsaWdodCwgVmlldywgUGxhdGZvcm0sIFN0eWxlU2hlZXQsIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vaW1hZ2UvSW1hZ2UnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbnMvSWNvbic7XG5jb25zdCBBY2Nlc3NvcnkgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzaXplID0gMTAsIHN0eWxlLCB1bmRlcmxheUNvbG9yID0gJyMwMDAnLCBvblByZXNzLCBvbkxvbmdQcmVzcywgc291cmNlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInNpemVcIiwgXCJzdHlsZVwiLCBcInVuZGVybGF5Q29sb3JcIiwgXCJvblByZXNzXCIsIFwib25Mb25nUHJlc3NcIiwgXCJzb3VyY2VcIl0pO1xuICAgIHJldHVybiAoPFRvdWNoYWJsZUhpZ2hsaWdodCBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLmFjY2Vzc29yeSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBzaXplIC8gMixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgXX0gdW5kZXJsYXlDb2xvcj17dW5kZXJsYXlDb2xvcn0gb25QcmVzcz17b25QcmVzc30gb25Mb25nUHJlc3M9e29uTG9uZ1ByZXNzfT5cbiAgICAgIDxWaWV3PlxuICAgICAgICB7c291cmNlID8gKDxJbWFnZSBzb3VyY2U9e3NvdXJjZX0gc3R5bGU9e3tcbiAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBzaXplIC8gMixcbiAgICAgICAgICAgIH19IHsuLi5wcm9wc30vPikgOiAoPEljb24gbmFtZT1cIm1vZGUtZWRpdFwiIHR5cGU9XCJtYXRlcmlhbFwiIGNvbG9yPVwiI2ZmZlwiIHNpemU9e3NpemUgKiAwLjh9IHsuLi5wcm9wc30vPil9XG4gICAgICA8L1ZpZXc+XG4gICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgYWNjZXNzb3J5OiBPYmplY3QuYXNzaWduKHsgcG9zaXRpb246ICdhYnNvbHV0ZScsIGJvdHRvbTogMCwgcmlnaHQ6IDAsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsIGJhY2tncm91bmRDb2xvcjogJyNhYWEnIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgc2hhZG93Q29sb3I6ICcjMDAwJyxcbiAgICAgICAgICAgIHNoYWRvd09mZnNldDogeyB3aWR0aDogMSwgaGVpZ2h0OiAxIH0sXG4gICAgICAgICAgICBzaGFkb3dSYWRpdXM6IDIsXG4gICAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjUsXG4gICAgICAgIH0sXG4gICAgfSkpLFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQWNjZXNzb3J5LCAnQXZhdGFyQWNjZXNzb3J5Jyk7XG4i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