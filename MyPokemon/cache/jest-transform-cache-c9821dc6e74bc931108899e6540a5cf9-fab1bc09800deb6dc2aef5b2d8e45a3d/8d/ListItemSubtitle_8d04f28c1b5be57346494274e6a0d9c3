8f101985bc13237557857534f6173bef
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ANDROID_SECONDARY = 'rgba(0, 0, 0, 0.54)';
var ListItemSubtitle = function ListItemSubtitle(_a) {
  var style = _a.style,
    right = _a.right,
    children = _a.children,
    props = __rest(_a, ["style", "right", "children"]);
  return (0, _jsxRuntime.jsx)(_Text.default, Object.assign({
    testID: "listItemTitle",
    style: _reactNative.StyleSheet.flatten([styles.subtitle, right && styles.rightSubtitle, style])
  }, props, {
    children: children
  }));
};
var styles = _reactNative.StyleSheet.create({
  subtitle: Object.assign({
    backgroundColor: 'transparent'
  }, _reactNative.Platform.select({
    ios: {
      fontSize: 15
    },
    default: {
      color: ANDROID_SECONDARY,
      fontSize: 14
    }
  })),
  rightSubtitle: {
    color: ANDROID_SECONDARY
  }
});
var _default = (0, _config.withTheme)(ListItemSubtitle, 'ListItemSubtitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFORFJPSURfU0VDT05EQVJZIiwiTGlzdEl0ZW1TdWJ0aXRsZSIsIl9hIiwic3R5bGUiLCJyaWdodCIsImNoaWxkcmVuIiwicHJvcHMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsInN1YnRpdGxlIiwicmlnaHRTdWJ0aXRsZSIsImNyZWF0ZSIsImFzc2lnbiIsImJhY2tncm91bmRDb2xvciIsIlBsYXRmb3JtIiwic2VsZWN0IiwiaW9zIiwiZm9udFNpemUiLCJkZWZhdWx0IiwiY29sb3IiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJMaXN0SXRlbVN1YnRpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vdGV4dC9UZXh0JztcbmNvbnN0IEFORFJPSURfU0VDT05EQVJZID0gJ3JnYmEoMCwgMCwgMCwgMC41NCknO1xuY29uc3QgTGlzdEl0ZW1TdWJ0aXRsZSA9IChfYSkgPT4ge1xuICAgIHZhciB7IHN0eWxlLCByaWdodCwgY2hpbGRyZW4gfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wic3R5bGVcIiwgXCJyaWdodFwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICByZXR1cm4gKDxUZXh0IHRlc3RJRD1cImxpc3RJdGVtVGl0bGVcIiBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy5zdWJ0aXRsZSxcbiAgICAgICAgICAgIHJpZ2h0ICYmIHN0eWxlcy5yaWdodFN1YnRpdGxlLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgIF0pfSB7Li4ucHJvcHN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVGV4dD4pO1xufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBzdWJ0aXRsZTogT2JqZWN0LmFzc2lnbih7IGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBpb3M6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAxNSxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29sb3I6IEFORFJPSURfU0VDT05EQVJZLFxuICAgICAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICB9LFxuICAgIH0pKSxcbiAgICByaWdodFN1YnRpdGxlOiB7XG4gICAgICAgIGNvbG9yOiBBTkRST0lEX1NFQ09OREFSWSxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTGlzdEl0ZW1TdWJ0aXRsZSwgJ0xpc3RJdGVtU3VidGl0bGUnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQWdDO0FBZGhDLElBQUlBLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQUtELElBQU1XLGlCQUFpQixHQUFHLHFCQUFxQjtBQUMvQyxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCLENBQUlDLEVBQUUsRUFBSztFQUM3QixJQUFNQyxLQUFLLEdBQXNCRCxFQUFFLENBQTdCQyxLQUFLO0lBQUVDLEtBQUssR0FBZUYsRUFBRSxDQUF0QkUsS0FBSztJQUFFQyxRQUFRLEdBQUtILEVBQUUsQ0FBZkcsUUFBUTtJQUFTQyxLQUFLLEdBQUdwQixNQUFNLENBQUNnQixFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0VBQ3ZGLE9BQVEscUJBQUMsYUFBSTtJQUFDLE1BQU0sRUFBQyxlQUFlO0lBQUMsS0FBSyxFQUFFSyx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FDdkRDLE1BQU0sQ0FBQ0MsUUFBUSxFQUNmTixLQUFLLElBQUlLLE1BQU0sQ0FBQ0UsYUFBYSxFQUM3QlIsS0FBSyxDQUNSO0VBQUUsR0FBS0csS0FBSztJQUFBLFVBQ2REO0VBQVEsR0FDSjtBQUNYLENBQUM7QUFDRCxJQUFNSSxNQUFNLEdBQUdGLHVCQUFVLENBQUNLLE1BQU0sQ0FBQztFQUM3QkYsUUFBUSxFQUFFbkIsTUFBTSxDQUFDc0IsTUFBTSxDQUFDO0lBQUVDLGVBQWUsRUFBRTtFQUFjLENBQUMsRUFBRUMscUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3hFQyxHQUFHLEVBQUU7TUFDREMsUUFBUSxFQUFFO0lBQ2QsQ0FBQztJQUNEQyxPQUFPLEVBQUU7TUFDTEMsS0FBSyxFQUFFcEIsaUJBQWlCO01BQ3hCa0IsUUFBUSxFQUFFO0lBQ2Q7RUFDSixDQUFDLENBQUMsQ0FBQztFQUNIUCxhQUFhLEVBQUU7SUFDWFMsS0FBSyxFQUFFcEI7RUFDWDtBQUNKLENBQUMsQ0FBQztBQUFDLGVBQ1ksSUFBQXFCLGlCQUFTLEVBQUNwQixnQkFBZ0IsRUFBRSxrQkFBa0IsQ0FBQztBQUFBIn0=