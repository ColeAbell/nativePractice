ff41fd9cbe13d87eed7ee23fced7414c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tooltip = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Triangle = _interopRequireDefault(require("./Triangle"));
var _getTooltipCoordinate2 = _interopRequireWildcard(require("./getTooltipCoordinate"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var defaultProps = {
  withOverlay: true,
  overlayColor: 'rgba(250, 250, 250, 0.70)',
  highlightColor: 'transparent',
  withPointer: true,
  toggleOnPress: true,
  toggleAction: 'onPress',
  height: 40,
  width: 150,
  containerStyle: {},
  backgroundColor: '#617080',
  onClose: function onClose() {},
  onOpen: function onOpen() {},
  skipAndroidStatusBar: false,
  ModalComponent: _reactNative.Modal,
  closeOnlyOnBackdropPress: false
};
var Tooltip = function (_React$Component) {
  (0, _inherits2.default)(Tooltip, _React$Component);
  var _super = _createSuper(Tooltip);
  function Tooltip() {
    var _this;
    (0, _classCallCheck2.default)(this, Tooltip);
    _this = _super.apply(this, arguments);
    _this._isMounted = false;
    _this.state = {
      isVisible: false,
      yOffset: 0,
      xOffset: 0,
      elementWidth: 0,
      elementHeight: 0
    };
    _this.toggleTooltip = function () {
      var onClose = _this.props.onClose;
      _this.getElementPosition();
      _this._isMounted && _this.setState(function (prevState) {
        if (prevState.isVisible) {
          onClose && onClose();
        }
        return {
          isVisible: !prevState.isVisible
        };
      });
    };
    _this.wrapWithPress = function (toggleOnPress, toggleAction, children) {
      if (toggleOnPress) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, Object.assign({}, (0, _defineProperty2.default)({}, toggleAction, _this.toggleTooltip), {
          delayLongPress: 250,
          activeOpacity: 1,
          children: children
        }));
      }
      return children;
    };
    _this.containerStyle = function (withOverlay, overlayColor) {
      return {
        backgroundColor: withOverlay ? overlayColor : 'transparent',
        flex: 1
      };
    };
    _this.getTooltipStyle = function () {
      var _ref2;
      var _this$state = _this.state,
        yOffset = _this$state.yOffset,
        xOffset = _this$state.xOffset,
        elementHeight = _this$state.elementHeight,
        elementWidth = _this$state.elementWidth;
      var _this$props = _this.props,
        height = _this$props.height,
        backgroundColor = _this$props.backgroundColor,
        width = _this$props.width,
        withPointer = _this$props.withPointer,
        containerStyle = _this$props.containerStyle;
      var _getTooltipCoordinate = (0, _getTooltipCoordinate2.default)(xOffset, yOffset, elementWidth, elementHeight, _helpers.ScreenWidth, _helpers.ScreenHeight, width, height, withPointer),
        x = _getTooltipCoordinate.x,
        y = _getTooltipCoordinate.y;
      return _reactNative.StyleSheet.flatten([(_ref2 = {
        position: 'absolute'
      }, (0, _defineProperty2.default)(_ref2, _reactNative.I18nManager.isRTL ? 'right' : 'left', x), (0, _defineProperty2.default)(_ref2, "top", y), (0, _defineProperty2.default)(_ref2, "width", width), (0, _defineProperty2.default)(_ref2, "height", height), (0, _defineProperty2.default)(_ref2, "backgroundColor", backgroundColor), (0, _defineProperty2.default)(_ref2, "display", 'flex'), (0, _defineProperty2.default)(_ref2, "alignItems", 'center'), (0, _defineProperty2.default)(_ref2, "justifyContent", 'center'), (0, _defineProperty2.default)(_ref2, "flex", 1), (0, _defineProperty2.default)(_ref2, "borderRadius", 10), (0, _defineProperty2.default)(_ref2, "padding", 10), _ref2), containerStyle]);
    };
    _this.renderPointer = function (tooltipY) {
      var _this$state2 = _this.state,
        yOffset = _this$state2.yOffset,
        xOffset = _this$state2.xOffset,
        elementHeight = _this$state2.elementHeight,
        elementWidth = _this$state2.elementWidth;
      var _this$props2 = _this.props,
        backgroundColor = _this$props2.backgroundColor,
        pointerColor = _this$props2.pointerColor;
      var pastMiddleLine = yOffset > (tooltipY || 0);
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: (0, _defineProperty2.default)({
          position: 'absolute',
          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2
        }, _reactNative.I18nManager.isRTL ? 'right' : 'left', xOffset + (0, _getTooltipCoordinate2.getElementVisibleWidth)(elementWidth, xOffset, _helpers.ScreenWidth) / 2 - 7.5),
        children: (0, _jsxRuntime.jsx)(_Triangle.default, {
          style: {
            borderBottomColor: pointerColor || backgroundColor
          },
          isDown: pastMiddleLine
        })
      });
    };
    _this.getTooltipHighlightedButtonStyle = function () {
      var _ref4;
      var highlightColor = _this.props.highlightColor;
      var _this$state3 = _this.state,
        yOffset = _this$state3.yOffset,
        xOffset = _this$state3.xOffset,
        elementWidth = _this$state3.elementWidth,
        elementHeight = _this$state3.elementHeight;
      return _ref4 = {
        position: 'absolute',
        top: yOffset
      }, (0, _defineProperty2.default)(_ref4, _reactNative.I18nManager.isRTL ? 'right' : 'left', xOffset), (0, _defineProperty2.default)(_ref4, "backgroundColor", highlightColor), (0, _defineProperty2.default)(_ref4, "overflow", 'visible'), (0, _defineProperty2.default)(_ref4, "width", elementWidth), (0, _defineProperty2.default)(_ref4, "height", elementHeight), _ref4;
    };
    _this.renderTouchableHighlightedButton = function () {
      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: "tooltipTouchableHighlightedButton",
        onPress: function onPress() {
          return _this.toggleTooltip();
        },
        style: TooltipHighlightedButtonStyle,
        children: _this.props.children
      });
    };
    _this.renderStaticHighlightedButton = function () {
      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: TooltipHighlightedButtonStyle,
        children: _this.props.children
      });
    };
    _this.renderHighlightedButton = function () {
      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;
      if (closeOnlyOnBackdropPress) {
        return _this.renderTouchableHighlightedButton();
      } else {
        return _this.renderStaticHighlightedButton();
      }
    };
    _this.renderContent = function (withTooltip) {
      var _this$props3 = _this.props,
        popover = _this$props3.popover,
        withPointer = _this$props3.withPointer,
        toggleOnPress = _this$props3.toggleOnPress,
        toggleAction = _this$props3.toggleAction;
      if (!withTooltip) {
        return _this.wrapWithPress(toggleOnPress, toggleAction, _this.props.children);
      }
      var tooltipStyle = _this.getTooltipStyle();
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        children: [_this.renderHighlightedButton(), withPointer && _this.renderPointer(tooltipStyle.top), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: tooltipStyle,
          testID: "tooltipPopoverContainer",
          children: popover
        })]
      });
    };
    _this.getElementPosition = function () {
      var skipAndroidStatusBar = _this.props.skipAndroidStatusBar;
      _this.renderedElement && _this.renderedElement.measure(function (_frameOffsetX, _frameOffsetY, width, height, pageOffsetX, pageOffsetY) {
        _this._isMounted && _this.setState({
          xOffset: pageOffsetX,
          yOffset: _helpers.isIOS || skipAndroidStatusBar ? pageOffsetY : pageOffsetY - _reactNative.Platform.select({
            android: _reactNative.StatusBar.currentHeight,
            ios: 20,
            default: 0
          }),
          elementWidth: width,
          elementHeight: height
        });
      });
    };
    _this.renderStaticModalContent = function () {
      var _this$props4 = _this.props,
        withOverlay = _this$props4.withOverlay,
        overlayColor = _this$props4.overlayColor;
      return (0, _jsxRuntime.jsxs)(_react.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: _this.containerStyle(withOverlay, overlayColor),
          onPress: _this.toggleTooltip,
          activeOpacity: 1
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          children: _this.renderContent(true)
        })]
      });
    };
    _this.renderTogglingModalContent = function () {
      var _this$props5 = _this.props,
        withOverlay = _this$props5.withOverlay,
        overlayColor = _this$props5.overlayColor;
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: _this.containerStyle(withOverlay, overlayColor),
        onPress: _this.toggleTooltip,
        activeOpacity: 1,
        children: _this.renderContent(true)
      });
    };
    _this.renderModalContent = function () {
      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;
      if (closeOnlyOnBackdropPress) {
        return _this.renderStaticModalContent();
      } else {
        return _this.renderTogglingModalContent();
      }
    };
    return _this;
  }
  (0, _createClass2.default)(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
      requestAnimationFrame(this.getElementPosition);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var isVisible = this.state.isVisible;
      var _this$props6 = this.props,
        onOpen = _this$props6.onOpen,
        ModalComponent = _this$props6.ModalComponent;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        collapsable: false,
        ref: function ref(e) {
          _this2.renderedElement = e;
        },
        children: [this.renderContent(false), (0, _jsxRuntime.jsx)(ModalComponent, {
          animationType: "fade",
          visible: isVisible,
          transparent: true,
          onShow: onOpen,
          children: this.renderModalContent()
        })]
      });
    }
  }]);
  return Tooltip;
}(_react.default.Component);
exports.Tooltip = Tooltip;
Tooltip.defaultProps = defaultProps;
var _default = (0, _config.withTheme)(Tooltip, 'Tooltip');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,