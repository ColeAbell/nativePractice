caf6de60352453d4e882b80bee2f2b02
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _HomeScreen = _interopRequireDefault(require("../UI/components/screens/HomeScreen"));
var _pokemonRequests = require("../services/pokemonRequests");
global.fetch = require('jest-fetch-mock');
var content = {
  results: [{
    name: 'bulbasaur',
    url: 'https://pokeapi.co/api/v2/pokemon/1/'
  }, {
    name: 'ivysaur',
    url: 'https://pokeapi.co/api/v2/pokemon/2/'
  }, {
    name: 'venusaur',
    url: 'https://pokeapi.co/api/v2/pokemon/3/'
  }]
};
beforeEach(function () {
  fetch.resetMocks();
});
test('returns result if object', function () {
  fetch.mockResponseOnce(JSON.stringify(content));
  var onResponse = jest.fn();
  var onError = jest.fn();
  return (0, _pokemonRequests.getAllPokemon)().then(onResponse).catch(onError).finally(function () {
    expect(onResponse).toHaveBeenCalled();
    expect(onResponse.mock.calls[0][0]).toEqual(content);
    console.log(onResponse.mock.calls);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJmZXRjaCIsInJlcXVpcmUiLCJjb250ZW50IiwicmVzdWx0cyIsIm5hbWUiLCJ1cmwiLCJiZWZvcmVFYWNoIiwicmVzZXRNb2NrcyIsInRlc3QiLCJtb2NrUmVzcG9uc2VPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9uUmVzcG9uc2UiLCJqZXN0IiwiZm4iLCJvbkVycm9yIiwiZ2V0QWxsUG9rZW1vbiIsInRoZW4iLCJjYXRjaCIsImZpbmFsbHkiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9jayIsImNhbGxzIiwidG9FcXVhbCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJIb21lU2NyZWVuLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEhvbWVTY3JlZW4gZnJvbSAnLi4vVUkvY29tcG9uZW50cy9zY3JlZW5zL0hvbWVTY3JlZW4nO1xuaW1wb3J0IHtnZXRBbGxQb2tlbW9uLCBnZXRPbmVQb2tlbW9ufSBmcm9tICcuLi9zZXJ2aWNlcy9wb2tlbW9uUmVxdWVzdHMnO1xuXG5nbG9iYWwuZmV0Y2ggPSByZXF1aXJlKCdqZXN0LWZldGNoLW1vY2snKTtcblxubGV0IGNvbnRlbnQgPSB7XG4gIHJlc3VsdHM6IFtcbiAgICB7XG4gICAgICBuYW1lOiAnYnVsYmFzYXVyJyxcbiAgICAgIHVybDogJ2h0dHBzOi8vcG9rZWFwaS5jby9hcGkvdjIvcG9rZW1vbi8xLycsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnaXZ5c2F1cicsXG4gICAgICB1cmw6ICdodHRwczovL3Bva2VhcGkuY28vYXBpL3YyL3Bva2Vtb24vMi8nLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ3ZlbnVzYXVyJyxcbiAgICAgIHVybDogJ2h0dHBzOi8vcG9rZWFwaS5jby9hcGkvdjIvcG9rZW1vbi8zLycsXG4gICAgfSxcbiAgXSxcbn07XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBmZXRjaC5yZXNldE1vY2tzKCk7XG59KTtcblxudGVzdCgncmV0dXJucyByZXN1bHQgaWYgb2JqZWN0JywgKCkgPT4ge1xuICBmZXRjaC5tb2NrUmVzcG9uc2VPbmNlKEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpKTtcbiAgY29uc3Qgb25SZXNwb25zZSA9IGplc3QuZm4oKTtcbiAgY29uc3Qgb25FcnJvciA9IGplc3QuZm4oKTtcbiAgcmV0dXJuIGdldEFsbFBva2Vtb24oKVxuICAgIC50aGVuKG9uUmVzcG9uc2UpXG4gICAgLmNhdGNoKG9uRXJyb3IpXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgZXhwZWN0KG9uUmVzcG9uc2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChvblJlc3BvbnNlLm1vY2suY2FsbHNbMF1bMF0pLnRvRXF1YWwoY29udGVudCk7XG4gICAgICBjb25zb2xlLmxvZyhvblJlc3BvbnNlLm1vY2suY2FsbHMpO1xuICAgIH0pO1xufSk7XG4vKlxudGVzdCgnRG9lcyBob21lIHNjcmVlbiB3b3JrJywgYXN5bmMgKCkgPT4ge1xuICBnZXRBbGxQb2tlbW9uID0gamVzdC5mbigoKSA9PiBjb250ZW50KTtcbiAgcmVuZGVyKDxIb21lU2NyZWVuIG5hdmlnYXRpb249e3tzZXRPcHRpb25zOiBqZXN0LmZuKCl9fSAvPik7XG4gIGNvbnN0IHBva2VzID0gYXdhaXQgc2NyZWVuLmdldEFsbEJ5VGVzdElkKCdib2InKTtcbiAgZXhwZWN0KHBva2VzKS50b0hhdmVMZW5ndGgoMyk7XG59KTtcbiovXG4iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsTUFBTSxDQUFDQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUV6QyxJQUFJQyxPQUFPLEdBQUc7RUFDWkMsT0FBTyxFQUFFLENBQ1A7SUFDRUMsSUFBSSxFQUFFLFdBQVc7SUFDakJDLEdBQUcsRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNFRCxJQUFJLEVBQUUsU0FBUztJQUNmQyxHQUFHLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDRUQsSUFBSSxFQUFFLFVBQVU7SUFDaEJDLEdBQUcsRUFBRTtFQUNQLENBQUM7QUFFTCxDQUFDO0FBRURDLFVBQVUsQ0FBQyxZQUFNO0VBQ2ZOLEtBQUssQ0FBQ08sVUFBVSxFQUFFO0FBQ3BCLENBQUMsQ0FBQztBQUVGQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUNyQ1IsS0FBSyxDQUFDUyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUNULE9BQU8sQ0FBQyxDQUFDO0VBQy9DLElBQU1VLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7RUFDNUIsSUFBTUMsT0FBTyxHQUFHRixJQUFJLENBQUNDLEVBQUUsRUFBRTtFQUN6QixPQUFPLElBQUFFLDhCQUFhLEdBQUUsQ0FDbkJDLElBQUksQ0FBQ0wsVUFBVSxDQUFDLENBQ2hCTSxLQUFLLENBQUNILE9BQU8sQ0FBQyxDQUNkSSxPQUFPLENBQUMsWUFBTTtJQUNiQyxNQUFNLENBQUNSLFVBQVUsQ0FBQyxDQUFDUyxnQkFBZ0IsRUFBRTtJQUNyQ0QsTUFBTSxDQUFDUixVQUFVLENBQUNVLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBQ3RCLE9BQU8sQ0FBQztJQUNwRHVCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDZCxVQUFVLENBQUNVLElBQUksQ0FBQ0MsS0FBSyxDQUFDO0VBQ3BDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyJ9