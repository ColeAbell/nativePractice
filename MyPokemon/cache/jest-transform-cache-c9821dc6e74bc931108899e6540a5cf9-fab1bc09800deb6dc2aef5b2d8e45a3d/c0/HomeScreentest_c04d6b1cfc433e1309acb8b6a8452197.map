{"version":3,"names":[],"sources":["HomeScreen.test.js"],"sourcesContent":["import {render, screen, fireEvent, act} from '@testing-library/react-native';\nimport 'react-native';\nimport React from 'react';\nimport HomeScreen from '../UI/components/screens/HomeScreen';\nimport {getAllPokemon, getOnePokemon} from '../services/pokemonRequests';\nimport { Text } from 'react-native-elements';\n/*\nglobal.fetch = require('jest-fetch-mock');\n\nlet content = {\n  results: [\n    {\n      name: 'bulbasaur',\n      url: 'https://pokeapi.co/api/v2/pokemon/1/',\n    },\n    {\n      name: 'ivysaur',\n      url: 'https://pokeapi.co/api/v2/pokemon/2/',\n    },\n    {\n      name: 'venusaur',\n      url: 'https://pokeapi.co/api/v2/pokemon/3/',\n    },\n  ],\n};\n\njest.mock('../UI/components/Pokemon', () => () => {\n  return content.results.map(p => <div>{p.name}</div>);\n});\n\nbeforeEach(() => {\n  fetch.resetMocks();\n});\n\ntest('returns result if object', () => {\n  fetch.mockResponseOnce(JSON.stringify(content));\n  const onResponse = jest.fn();\n  const onError = jest.fn();\n  return getAllPokemon()\n    .then(onResponse)\n    .catch(onError)\n    .finally(() => {\n      expect(onResponse).toHaveBeenCalled();\n      expect(onResponse.mock.calls[0][0]).toEqual(content);\n      console.log(onResponse.mock.calls);\n    });\n});\n\ntest('Does home screen work', async () => {\n  fetch.mockResponseOnce(JSON.stringify(content));\n  jest.useFakeTimers();\n  const {getByText} = render(\n    <HomeScreen navigation={{setOptions: jest.fn()}} />,\n  );\n  act(() => {\n    jest.runAllTimers();\n  });\n  expect(screen.getByText('Please work')).toBeTruthy();\n  expect(screen.getByText('venusaur')).toBeOnTheScreen();\n\n  //const pokes = await screen.getAllByTestId('bob');\n  //expect(pokes).toHaveLength(3);\n});\n*/\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA"}