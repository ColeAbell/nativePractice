ff94a317967780f046bc88ec4186802a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ListItemBase = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListItemBase = function ListItemBase(props) {
  var _a, _b;
  var containerStyle = props.containerStyle,
    onPress = props.onPress,
    onLongPress = props.onLongPress,
    _props$Component = props.Component,
    Component = _props$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableHighlight : _reactNative.View : _props$Component,
    disabled = props.disabled,
    disabledStyle = props.disabledStyle,
    bottomDivider = props.bottomDivider,
    topDivider = props.topDivider,
    _props$pad = props.pad,
    pad = _props$pad === void 0 ? 16 : _props$pad,
    linearGradientProps = props.linearGradientProps,
    _props$ViewComponent = props.ViewComponent,
    ViewComponent = _props$ViewComponent === void 0 ? _reactNative.View : _props$ViewComponent,
    theme = props.theme,
    children = props.children,
    attributes = __rest(props, ["containerStyle", "onPress", "onLongPress", "Component", "disabled", "disabledStyle", "bottomDivider", "topDivider", "pad", "linearGradientProps", "ViewComponent", "theme", "children"]);
  if (props.linearGradientProps && !props.ViewComponent) {
    console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
  }
  return (0, _jsxRuntime.jsx)(Component, Object.assign({}, attributes, {
    onPress: onPress,
    onLongPress: onLongPress,
    disabled: disabled,
    children: (0, _jsxRuntime.jsx)(PadView, Object.assign({
      Component: ViewComponent
    }, linearGradientProps, {
      style: _reactNative.StyleSheet.flatten([Object.assign(Object.assign({}, _reactNative.Platform.select({
        ios: {
          padding: 14
        },
        default: {
          padding: 16
        }
      })), {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white,
        borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.divider
      }), topDivider && {
        borderTopWidth: _reactNative.StyleSheet.hairlineWidth
      }, bottomDivider && {
        borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
      }, containerStyle, disabled && disabledStyle]),
      pad: pad,
      children: children
    }))
  }));
};
exports.ListItemBase = ListItemBase;
var PadView = function PadView(_a) {
  var children = _a.children,
    pad = _a.pad,
    Component = _a.Component,
    props = __rest(_a, ["children", "pad", "Component"]);
  var _root = (0, _react.useRef)(null);
  var childrens = _react.default.Children.toArray(children);
  var length = childrens.length;
  var Container = Component || _reactNative.View;
  return (0, _jsxRuntime.jsx)(Container, Object.assign({}, props, {
    ref: _root,
    testID: "padView",
    children: _react.default.Children.map(childrens, function (child, index) {
      return child && [child, index !== length - 1 && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          paddingLeft: pad
        }
      })];
    })
  }));
};
var _default = (0, _config.withTheme)(ListItemBase, 'ListItem');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,