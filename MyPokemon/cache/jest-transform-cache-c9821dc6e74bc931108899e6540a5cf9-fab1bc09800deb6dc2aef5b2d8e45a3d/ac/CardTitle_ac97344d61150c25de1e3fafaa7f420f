728ec81a4c7a410f771b7f5b7b8f68b0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var CardTitle = function CardTitle(_a) {
  var _b;
  var style = _a.style,
    theme = _a.theme,
    props = __rest(_a, ["style", "theme"]);
  return (0, _jsxRuntime.jsx)(_Text.default, Object.assign({
    testID: "cardTitle",
    style: _reactNative.StyleSheet.flatten([Object.assign(Object.assign({
      fontSize: (0, _normalizeText.default)(14),
      color: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey1
    }, _reactNative.Platform.select({
      android: Object.assign({}, _config.fonts.android.black),
      default: {
        fontWeight: 'bold'
      }
    })), {
      textAlign: 'center',
      marginBottom: 15
    }), style])
  }, props));
};
var _default = (0, _config.withTheme)(CardTitle, 'CardTitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkNhcmRUaXRsZSIsIl9hIiwiX2IiLCJzdHlsZSIsInRoZW1lIiwicHJvcHMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImFzc2lnbiIsImZvbnRTaXplIiwibm9ybWFsaXplIiwiY29sb3IiLCJjb2xvcnMiLCJncmV5MSIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImZvbnRzIiwiYmxhY2siLCJkZWZhdWx0IiwiZm9udFdlaWdodCIsInRleHRBbGlnbiIsIm1hcmdpbkJvdHRvbSIsIndpdGhUaGVtZSJdLCJzb3VyY2VzIjpbIkNhcmRUaXRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhdGZvcm0sIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IG5vcm1hbGl6ZSBmcm9tICcuLi9oZWxwZXJzL25vcm1hbGl6ZVRleHQnO1xuaW1wb3J0IHsgZm9udHMsIHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi90ZXh0L1RleHQnO1xuY29uc3QgQ2FyZFRpdGxlID0gKF9hKSA9PiB7XG4gICAgdmFyIF9iO1xuICAgIHZhciB7IHN0eWxlLCB0aGVtZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJzdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICByZXR1cm4gKDxUZXh0IHRlc3RJRD1cImNhcmRUaXRsZVwiIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgZm9udFNpemU6IG5vcm1hbGl6ZSgxNCksIGNvbG9yOiAoX2IgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ3JleTEgfSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiBPYmplY3QuYXNzaWduKHt9LCBmb250cy5hbmRyb2lkLmJsYWNrKSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpLCB7IHRleHRBbGlnbjogJ2NlbnRlcicsIG1hcmdpbkJvdHRvbTogMTUgfSksXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgXSl9IHsuLi5wcm9wc30vPik7XG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKENhcmRUaXRsZSwgJ0NhcmRUaXRsZScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFnQztBQWZoQyxJQUFJQSxNQUFNLEdBQUksVUFBUSxTQUFLQSxNQUFNLElBQUssVUFBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSUMsQ0FBQyxJQUFJSCxDQUFDLEVBQUUsSUFBSUksTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMvRUQsQ0FBQyxDQUFDQyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxDQUFDRyxDQUFDLENBQUM7RUFDZixJQUFJSCxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQXFCLEtBQUssVUFBVSxFQUMvRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVQLENBQUMsR0FBR0MsTUFBTSxDQUFDSyxxQkFBcUIsQ0FBQ1QsQ0FBQyxDQUFDLEVBQUVVLENBQUMsR0FBR1AsQ0FBQyxDQUFDUSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJTixNQUFNLENBQUNDLFNBQVMsQ0FBQ08sb0JBQW9CLENBQUNMLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEVBQzFFUixDQUFDLENBQUNDLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBR1YsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDO0VBQ3pCO0VBQ0osT0FBT1IsQ0FBQztBQUNaLENBQUM7QUFNRCxJQUFNVyxTQUFTLEdBQUcsU0FBWkEsU0FBUyxDQUFJQyxFQUFFLEVBQUs7RUFDdEIsSUFBSUMsRUFBRTtFQUNOLElBQU1DLEtBQUssR0FBWUYsRUFBRSxDQUFuQkUsS0FBSztJQUFFQyxLQUFLLEdBQUtILEVBQUUsQ0FBWkcsS0FBSztJQUFTQyxLQUFLLEdBQUduQixNQUFNLENBQUNlLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztFQUNqRSxPQUFRLHFCQUFDLGFBQUk7SUFBQyxNQUFNLEVBQUMsV0FBVztJQUFDLEtBQUssRUFBRUssdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQ25EaEIsTUFBTSxDQUFDaUIsTUFBTSxDQUFDakIsTUFBTSxDQUFDaUIsTUFBTSxDQUFDO01BQUVDLFFBQVEsRUFBRSxJQUFBQyxzQkFBUyxFQUFDLEVBQUUsQ0FBQztNQUFFQyxLQUFLLEVBQUUsQ0FBQ1QsRUFBRSxHQUFHRSxLQUFLLEtBQUssSUFBSSxJQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEtBQUssQ0FBQ1EsTUFBTSxNQUFNLElBQUksSUFBSVYsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNXO0lBQU0sQ0FBQyxFQUFFQyxxQkFBUSxDQUFDQyxNQUFNLENBQUM7TUFDN0xDLE9BQU8sRUFBRXpCLE1BQU0sQ0FBQ2lCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRVMsYUFBSyxDQUFDRCxPQUFPLENBQUNFLEtBQUssQ0FBQztNQUMvQ0MsT0FBTyxFQUFFO1FBQ0xDLFVBQVUsRUFBRTtNQUNoQjtJQUNKLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFBRUMsU0FBUyxFQUFFLFFBQVE7TUFBRUMsWUFBWSxFQUFFO0lBQUcsQ0FBQyxDQUFDLEVBQy9DbkIsS0FBSyxDQUNSO0VBQUUsR0FBS0UsS0FBSyxFQUFHO0FBQ3hCLENBQUM7QUFBQyxlQUNhLElBQUFrQixpQkFBUyxFQUFDdkIsU0FBUyxFQUFFLFdBQVcsQ0FBQztBQUFBIn0=