{"version":3,"names":["global","fetch","require","beforeEach","resetMocks","test","console","log","pokereq","getOnePokemon","jest","fn","mockReturnValue","JSON","stringify","ditto","mocko","handlePress","render","name","url","waitFor","expect","screen","getByText","toBeTruthy","getByTestId","props","source","uri","toEqual","fireEvent","press","findByTestId","toBeCalledWith"],"sources":["Pokemon.test.js"],"sourcesContent":["import ditto from './ditto.json';\nimport {\n  render,\n  screen,\n  fireEvent,\n  act,\n  waitFor,\n} from '@testing-library/react-native';\nimport 'react-native';\nimport React from 'react';\nimport Pokemon from '../UI/components/Pokemon';\nimport * as pokereq from '../services/pokemonRequests';\n\nglobal.fetch = require('jest-fetch-mock');\n\nbeforeEach(() => {\n  fetch.resetMocks();\n});\n\n/*\ntest('returns result if object', () => {\n  fetch.mockResponseOnce(JSON.stringify(ditto));\n  const onResponse = jest.fn();\n  const onError = jest.fn();\n  return getOnePokemon()\n    .then(onResponse)\n    .catch(onError)\n    .finally(() => {\n      expect(onResponse).toHaveBeenCalled();\n      expect(onResponse.mock.calls[0][0]).toEqual(ditto);\n      console.log(onResponse.mock.calls);\n    });\n});\n*/\n\ntest('Does home screen work', async () => {\n  //fetch.mockResponseOnce(JSON.stringify(ditto));\n  console.log(pokereq);\n  /*\n  jest.spyOn(pokereq, 'getOnePokemon').mockImplementation(() => {\n    return JSON.stringify(ditto);\n  });\n  */\n  pokereq.getOnePokemon = jest.fn().mockReturnValue(JSON.stringify(ditto));\n  //jest.useFakeTimers();\n  const mocko = jest.fn().mockReturnValue(console.log('hitting'));\n  const handlePress = jest.fn().mockReturnValue();\n  //async function wait() {\n  render(\n    <Pokemon\n      details={{\n        name: 'ditto',\n        url: 'https://pokeapi.co/api/v2/pokemon/1/',\n      }}\n      press={handlePress}\n    />,\n  );\n  //}\n  //await wait();\n  /*\n    await act(async () => {\n      jest.runAllTimers();\n    });\n    */\n  await waitFor(() => {\n    expect(screen.getByText('ditto')).toBeTruthy();\n  });\n  expect(screen.getByTestId('sprite').props.source.uri).toEqual(\n    'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/132.png',\n  );\n  //console.log(screen.getByTestId('sprite').props);\n  fireEvent.press(await screen.findByTestId('pressable'));\n  expect(handlePress).toBeCalledWith(ditto);\n  //console.log(await screen.findByTestId('pressable'));\n\n  //const pokes = await screen.getAllByTestId('bob');\n  //expect(pokes).toHaveLength(3);\n});\n"],"mappings":";;;;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAuD;AAAA;AAAA;AAEvDA,MAAM,CAACC,KAAK,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAEzCC,UAAU,CAAC,YAAM;EACfF,KAAK,CAACG,UAAU,EAAE;AACpB,CAAC,CAAC;AAkBFC,IAAI,CAAC,uBAAuB,kCAAE,aAAY;EAExCC,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;EAMpBA,OAAO,CAACC,aAAa,GAAGC,IAAI,CAACC,EAAE,EAAE,CAACC,eAAe,CAACC,IAAI,CAACC,SAAS,CAACC,cAAK,CAAC,CAAC;EAExE,IAAMC,KAAK,GAAGN,IAAI,CAACC,EAAE,EAAE,CAACC,eAAe,CAACN,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,CAAC;EAC/D,IAAMU,WAAW,GAAGP,IAAI,CAACC,EAAE,EAAE,CAACC,eAAe,EAAE;EAE/C,IAAAM,mBAAM,EACJ,qBAAC,gBAAO;IACN,OAAO,EAAE;MACPC,IAAI,EAAE,OAAO;MACbC,GAAG,EAAE;IACP,CAAE;IACF,KAAK,EAAEH;EAAY,EACnB,CACH;EAQD,MAAM,IAAAI,oBAAO,EAAC,YAAM;IAClBC,MAAM,CAACC,mBAAM,CAACC,SAAS,CAAC,OAAO,CAAC,CAAC,CAACC,UAAU,EAAE;EAChD,CAAC,CAAC;EACFH,MAAM,CAACC,mBAAM,CAACG,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACC,MAAM,CAACC,GAAG,CAAC,CAACC,OAAO,CAC3D,kFAAkF,CACnF;EAEDC,sBAAS,CAACC,KAAK,OAAOT,mBAAM,CAACU,YAAY,CAAC,WAAW,CAAC,CAAC;EACvDX,MAAM,CAACL,WAAW,CAAC,CAACiB,cAAc,CAACnB,cAAK,CAAC;AAK3C,CAAC,EAAC"}