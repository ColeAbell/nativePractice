b150a25dfcf3fa949051178525817197
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualizedListCellContextProvider = VirtualizedListCellContextProvider;
exports.VirtualizedListContext = void 0;
exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
exports.VirtualizedListContextResetter = VirtualizedListContextResetter;
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var VirtualizedListContext = React.createContext(null);
exports.VirtualizedListContext = VirtualizedListContext;
if (__DEV__) {
  VirtualizedListContext.displayName = 'VirtualizedListContext';
}
function VirtualizedListContextResetter(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: null,
    children: children
  });
}
function VirtualizedListContextProvider(_ref2) {
  var children = _ref2.children,
    value = _ref2.value;
  var context = (0, React.useMemo)(function () {
    return {
      cellKey: null,
      getScrollMetrics: value.getScrollMetrics,
      horizontal: value.horizontal,
      getOutermostParentListRef: value.getOutermostParentListRef,
      registerAsNestedChild: value.registerAsNestedChild,
      unregisterAsNestedChild: value.unregisterAsNestedChild
    };
  }, [value.getScrollMetrics, value.horizontal, value.getOutermostParentListRef, value.registerAsNestedChild, value.unregisterAsNestedChild]);
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: context,
    children: children
  });
}
function VirtualizedListCellContextProvider(_ref3) {
  var cellKey = _ref3.cellKey,
    children = _ref3.children;
  var currContext = (0, React.useContext)(VirtualizedListContext);
  var context = (0, React.useMemo)(function () {
    return currContext == null ? null : Object.assign({}, currContext, {
      cellKey: cellKey
    });
  }, [currContext, cellKey]);
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: context,
    children: children
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWaXJ0dWFsaXplZExpc3RDb250ZXh0IiwiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwiX19ERVZfXyIsImRpc3BsYXlOYW1lIiwiVmlydHVhbGl6ZWRMaXN0Q29udGV4dFJlc2V0dGVyIiwiY2hpbGRyZW4iLCJWaXJ0dWFsaXplZExpc3RDb250ZXh0UHJvdmlkZXIiLCJ2YWx1ZSIsImNvbnRleHQiLCJ1c2VNZW1vIiwiY2VsbEtleSIsImdldFNjcm9sbE1ldHJpY3MiLCJob3Jpem9udGFsIiwiZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZiIsInJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCIsInVucmVnaXN0ZXJBc05lc3RlZENoaWxkIiwiVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlciIsImN1cnJDb250ZXh0IiwidXNlQ29udGV4dCJdLCJzb3VyY2VzIjpbIlZpcnR1YWxpemVkTGlzdENvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlb2YgVmlydHVhbGl6ZWRMaXN0IGZyb20gJy4vVmlydHVhbGl6ZWRMaXN0JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VDb250ZXh0LCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgQ29udGV4dCA9ICRSZWFkT25seTx7XG4gIGNlbGxLZXk6ID9zdHJpbmcsXG4gIGdldFNjcm9sbE1ldHJpY3M6ICgpID0+IHtcbiAgICBjb250ZW50TGVuZ3RoOiBudW1iZXIsXG4gICAgZE9mZnNldDogbnVtYmVyLFxuICAgIGR0OiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgdGltZXN0YW1wOiBudW1iZXIsXG4gICAgdmVsb2NpdHk6IG51bWJlcixcbiAgICB2aXNpYmxlTGVuZ3RoOiBudW1iZXIsXG4gICAgem9vbVNjYWxlOiBudW1iZXIsXG4gIH0sXG4gIGhvcml6b250YWw6ID9ib29sZWFuLFxuICBnZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmOiAoKSA9PiBSZWFjdC5FbGVtZW50UmVmPFZpcnR1YWxpemVkTGlzdD4sXG4gIHJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogKHtcbiAgICBjZWxsS2V5OiBzdHJpbmcsXG4gICAgcmVmOiBSZWFjdC5FbGVtZW50UmVmPFZpcnR1YWxpemVkTGlzdD4sXG4gIH0pID0+IHZvaWQsXG4gIHVucmVnaXN0ZXJBc05lc3RlZENoaWxkOiAoe1xuICAgIHJlZjogUmVhY3QuRWxlbWVudFJlZjxWaXJ0dWFsaXplZExpc3Q+LFxuICB9KSA9PiB2b2lkLFxufT47XG5cbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXplZExpc3RDb250ZXh0OiBSZWFjdC5Db250ZXh0PD9Db250ZXh0PiA9XG4gIFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAoX19ERVZfXykge1xuICBWaXJ0dWFsaXplZExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1ZpcnR1YWxpemVkTGlzdENvbnRleHQnO1xufVxuXG4vKipcbiAqIFJlc2V0cyB0aGUgY29udGV4dC4gSW50ZW5kZWQgZm9yIHVzZSBieSBwb3J0YWwtbGlrZSBjb21wb25lbnRzIChlLmcuIE1vZGFsKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZpcnR1YWxpemVkTGlzdENvbnRleHRSZXNldHRlcih7XG4gIGNoaWxkcmVuLFxufToge1xuICBjaGlsZHJlbjogUmVhY3QuTm9kZSxcbn0pOiBSZWFjdC5Ob2RlIHtcbiAgcmV0dXJuIChcbiAgICA8VmlydHVhbGl6ZWRMaXN0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bnVsbH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGNvbnRleHQgd2l0aCBtZW1vaXphdGlvbi4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBgVmlydHVhbGl6ZWRMaXN0YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlcih7XG4gIGNoaWxkcmVuLFxuICB2YWx1ZSxcbn06IHtcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG4gIHZhbHVlOiBDb250ZXh0LFxufSk6IFJlYWN0Lk5vZGUge1xuICAvLyBBdm9pZCBzZXR0aW5nIGEgbmV3bHkgY3JlYXRlZCBjb250ZXh0IG9iamVjdCBpZiB0aGUgdmFsdWVzIGFyZSBpZGVudGljYWwuXG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBjZWxsS2V5OiBudWxsLFxuICAgICAgZ2V0U2Nyb2xsTWV0cmljczogdmFsdWUuZ2V0U2Nyb2xsTWV0cmljcyxcbiAgICAgIGhvcml6b250YWw6IHZhbHVlLmhvcml6b250YWwsXG4gICAgICBnZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmOiB2YWx1ZS5nZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmLFxuICAgICAgcmVnaXN0ZXJBc05lc3RlZENoaWxkOiB2YWx1ZS5yZWdpc3RlckFzTmVzdGVkQ2hpbGQsXG4gICAgICB1bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogdmFsdWUudW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQsXG4gICAgfSksXG4gICAgW1xuICAgICAgdmFsdWUuZ2V0U2Nyb2xsTWV0cmljcyxcbiAgICAgIHZhbHVlLmhvcml6b250YWwsXG4gICAgICB2YWx1ZS5nZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmLFxuICAgICAgdmFsdWUucmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgICAgdmFsdWUudW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQsXG4gICAgXSxcbiAgKTtcbiAgcmV0dXJuIChcbiAgICA8VmlydHVhbGl6ZWRMaXN0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGBjZWxsS2V5YC4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBgVmlydHVhbGl6ZWRMaXN0YCBmb3IgZWFjaCBjZWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlcih7XG4gIGNlbGxLZXksXG4gIGNoaWxkcmVuLFxufToge1xuICBjZWxsS2V5OiBzdHJpbmcsXG4gIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxufSk6IFJlYWN0Lk5vZGUge1xuICAvLyBBdm9pZCBzZXR0aW5nIGEgbmV3bHkgY3JlYXRlZCBjb250ZXh0IG9iamVjdCBpZiB0aGUgdmFsdWVzIGFyZSBpZGVudGljYWwuXG4gIGNvbnN0IGN1cnJDb250ZXh0ID0gdXNlQ29udGV4dChWaXJ0dWFsaXplZExpc3RDb250ZXh0KTtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKGN1cnJDb250ZXh0ID09IG51bGwgPyBudWxsIDogey4uLmN1cnJDb250ZXh0LCBjZWxsS2V5fSksXG4gICAgW2N1cnJDb250ZXh0LCBjZWxsS2V5XSxcbiAgKTtcbiAgcmV0dXJuIChcbiAgICA8VmlydHVhbGl6ZWRMaXN0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFZQTtBQUErQjtBQUFBO0FBQUE7QUEwQnhCLElBQU1BLHNCQUErQyxHQUMxREMsS0FBSyxDQUFDQyxhQUFhLENBQUMsSUFBSSxDQUFDO0FBQUM7QUFDNUIsSUFBSUMsT0FBTyxFQUFFO0VBQ1hILHNCQUFzQixDQUFDSSxXQUFXLEdBQUcsd0JBQXdCO0FBQy9EO0FBS08sU0FBU0MsOEJBQThCLE9BSS9CO0VBQUEsSUFIYkMsUUFBUSxRQUFSQSxRQUFRO0VBSVIsT0FDRSxxQkFBQyxzQkFBc0IsQ0FBQyxRQUFRO0lBQUMsS0FBSyxFQUFFLElBQUs7SUFBQSxVQUMxQ0E7RUFBUSxFQUN1QjtBQUV0QztBQUtPLFNBQVNDLDhCQUE4QixRQU0vQjtFQUFBLElBTGJELFFBQVEsU0FBUkEsUUFBUTtJQUNSRSxLQUFLLFNBQUxBLEtBQUs7RUFNTCxJQUFNQyxPQUFPLEdBQUcsSUFBQUMsYUFBTyxFQUNyQjtJQUFBLE9BQU87TUFDTEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsZ0JBQWdCLEVBQUVKLEtBQUssQ0FBQ0ksZ0JBQWdCO01BQ3hDQyxVQUFVLEVBQUVMLEtBQUssQ0FBQ0ssVUFBVTtNQUM1QkMseUJBQXlCLEVBQUVOLEtBQUssQ0FBQ00seUJBQXlCO01BQzFEQyxxQkFBcUIsRUFBRVAsS0FBSyxDQUFDTyxxQkFBcUI7TUFDbERDLHVCQUF1QixFQUFFUixLQUFLLENBQUNRO0lBQ2pDLENBQUM7RUFBQSxDQUFDLEVBQ0YsQ0FDRVIsS0FBSyxDQUFDSSxnQkFBZ0IsRUFDdEJKLEtBQUssQ0FBQ0ssVUFBVSxFQUNoQkwsS0FBSyxDQUFDTSx5QkFBeUIsRUFDL0JOLEtBQUssQ0FBQ08scUJBQXFCLEVBQzNCUCxLQUFLLENBQUNRLHVCQUF1QixDQUM5QixDQUNGO0VBQ0QsT0FDRSxxQkFBQyxzQkFBc0IsQ0FBQyxRQUFRO0lBQUMsS0FBSyxFQUFFUCxPQUFRO0lBQUEsVUFDN0NIO0VBQVEsRUFDdUI7QUFFdEM7QUFLTyxTQUFTVyxrQ0FBa0MsUUFNbkM7RUFBQSxJQUxiTixPQUFPLFNBQVBBLE9BQU87SUFDUEwsUUFBUSxTQUFSQSxRQUFRO0VBTVIsSUFBTVksV0FBVyxHQUFHLElBQUFDLGdCQUFVLEVBQUNuQixzQkFBc0IsQ0FBQztFQUN0RCxJQUFNUyxPQUFPLEdBQUcsSUFBQUMsYUFBTyxFQUNyQjtJQUFBLE9BQU9RLFdBQVcsSUFBSSxJQUFJLEdBQUcsSUFBSSxxQkFBT0EsV0FBVztNQUFFUCxPQUFPLEVBQVBBO0lBQU8sRUFBQztFQUFBLENBQUMsRUFDOUQsQ0FBQ08sV0FBVyxFQUFFUCxPQUFPLENBQUMsQ0FDdkI7RUFDRCxPQUNFLHFCQUFDLHNCQUFzQixDQUFDLFFBQVE7SUFBQyxLQUFLLEVBQUVGLE9BQVE7SUFBQSxVQUM3Q0g7RUFBUSxFQUN1QjtBQUV0QyJ9