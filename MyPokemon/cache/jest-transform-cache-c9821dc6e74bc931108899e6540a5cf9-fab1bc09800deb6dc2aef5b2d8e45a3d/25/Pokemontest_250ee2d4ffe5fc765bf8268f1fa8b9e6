6538459171eda7f5d23a5f638f76298f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ditto = _interopRequireDefault(require("./ditto.json"));
var _reactNative = require("@testing-library/react-native");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _Pokemon = _interopRequireDefault(require("../UI/components/Pokemon"));
var _pokemonRequests = require("../services/pokemonRequests");
var _reactTestRenderer = require("react-test-renderer");
var _jsxRuntime = require("react/jsx-runtime");
global.fetch = require('jest-fetch-mock');
beforeEach(function () {
  fetch.resetMocks();
});
test('Does home screen work', (0, _asyncToGenerator2.default)(function* () {
  fetch.mockResponseOnce(JSON.stringify(_ditto.default));
  var handlePress = jest.fn();
  var root;
  yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
    root = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Pokemon.default, {
      details: {
        name: 'ditto',
        url: 'https://pokeapi.co/api/v2/pokemon/1/'
      },
      press: handlePress
    }));
  }));
  expect(_reactNative.screen.getByText('ditto')).toBeTruthy();
  console.log(_reactNative.screen.getByTestId('sprite').props);
  _reactNative.fireEvent.press(yield _reactNative.screen.findByTestId('pressable'));
  expect(handlePress).toBeCalledWith(_ditto.default);
  expect(_reactNative.screen.getByTestId('sprite').props.source.uri).toEqual('https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/132.png');
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJmZXRjaCIsInJlcXVpcmUiLCJiZWZvcmVFYWNoIiwicmVzZXRNb2NrcyIsInRlc3QiLCJtb2NrUmVzcG9uc2VPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsImRpdHRvIiwiaGFuZGxlUHJlc3MiLCJqZXN0IiwiZm4iLCJyb290IiwiYWN0IiwiY3JlYXRlIiwibmFtZSIsInVybCIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVUcnV0aHkiLCJjb25zb2xlIiwibG9nIiwiZ2V0QnlUZXN0SWQiLCJwcm9wcyIsImZpcmVFdmVudCIsInByZXNzIiwiZmluZEJ5VGVzdElkIiwidG9CZUNhbGxlZFdpdGgiLCJzb3VyY2UiLCJ1cmkiLCJ0b0VxdWFsIl0sInNvdXJjZXMiOlsiUG9rZW1vbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkaXR0byBmcm9tICcuL2RpdHRvLmpzb24nO1xuaW1wb3J0IHtyZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCBhY3R9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUG9rZW1vbiBmcm9tICcuLi9VSS9jb21wb25lbnRzL1Bva2Vtb24nO1xuaW1wb3J0IHtnZXRPbmVQb2tlbW9ufSBmcm9tICcuLi9zZXJ2aWNlcy9wb2tlbW9uUmVxdWVzdHMnO1xuaW1wb3J0IHtjcmVhdGV9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5nbG9iYWwuZmV0Y2ggPSByZXF1aXJlKCdqZXN0LWZldGNoLW1vY2snKTtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGZldGNoLnJlc2V0TW9ja3MoKTtcbn0pO1xuXG4vKlxudGVzdCgncmV0dXJucyByZXN1bHQgaWYgb2JqZWN0JywgKCkgPT4ge1xuICBmZXRjaC5tb2NrUmVzcG9uc2VPbmNlKEpTT04uc3RyaW5naWZ5KGRpdHRvKSk7XG4gIGNvbnN0IG9uUmVzcG9uc2UgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IG9uRXJyb3IgPSBqZXN0LmZuKCk7XG4gIHJldHVybiBnZXRPbmVQb2tlbW9uKClcbiAgICAudGhlbihvblJlc3BvbnNlKVxuICAgIC5jYXRjaChvbkVycm9yKVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIGV4cGVjdChvblJlc3BvbnNlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3Qob25SZXNwb25zZS5tb2NrLmNhbGxzWzBdWzBdKS50b0VxdWFsKGRpdHRvKTtcbiAgICAgIGNvbnNvbGUubG9nKG9uUmVzcG9uc2UubW9jay5jYWxscyk7XG4gICAgfSk7XG59KTtcbiovXG5cbnRlc3QoJ0RvZXMgaG9tZSBzY3JlZW4gd29yaycsIGFzeW5jICgpID0+IHtcbiAgZmV0Y2gubW9ja1Jlc3BvbnNlT25jZShKU09OLnN0cmluZ2lmeShkaXR0bykpO1xuICAvL2plc3QudXNlRmFrZVRpbWVycygpO1xuICBjb25zdCBoYW5kbGVQcmVzcyA9IGplc3QuZm4oKTtcbiAgbGV0IHJvb3Q7XG5cbiAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICByb290ID0gY3JlYXRlKFxuICAgICAgPFBva2Vtb25cbiAgICAgICAgZGV0YWlscz17e1xuICAgICAgICAgIG5hbWU6ICdkaXR0bycsXG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9wb2tlYXBpLmNvL2FwaS92Mi9wb2tlbW9uLzEvJyxcbiAgICAgICAgfX1cbiAgICAgICAgcHJlc3M9e2hhbmRsZVByZXNzfVxuICAgICAgLz4sXG4gICAgKTtcbiAgICAvL2plc3QucnVuQWxsVGltZXJzKCk7XG4gIH0pO1xuXG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdkaXR0bycpKS50b0JlVHJ1dGh5KCk7XG4gIGNvbnNvbGUubG9nKHNjcmVlbi5nZXRCeVRlc3RJZCgnc3ByaXRlJykucHJvcHMpO1xuICAvL2NvbnNvbGUubG9nKGF3YWl0IHNjcmVlbi5maW5kQnlUZXN0SWQoJ3ByZXNzYWJsZScpKTtcbiAgZmlyZUV2ZW50LnByZXNzKGF3YWl0IHNjcmVlbi5maW5kQnlUZXN0SWQoJ3ByZXNzYWJsZScpKTtcbiAgZXhwZWN0KGhhbmRsZVByZXNzKS50b0JlQ2FsbGVkV2l0aChkaXR0byk7XG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Nwcml0ZScpLnByb3BzLnNvdXJjZS51cmkpLnRvRXF1YWwoXG4gICAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Qb2tlQVBJL3Nwcml0ZXMvbWFzdGVyL3Nwcml0ZXMvcG9rZW1vbi8xMzIucG5nJyxcbiAgKTtcblxuICAvL2NvbnN0IHBva2VzID0gYXdhaXQgc2NyZWVuLmdldEFsbEJ5VGVzdElkKCdib2InKTtcbiAgLy9leHBlY3QocG9rZXMpLnRvSGF2ZUxlbmd0aCgzKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBMkM7QUFFM0NBLE1BQU0sQ0FBQ0MsS0FBSyxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFFekNDLFVBQVUsQ0FBQyxZQUFNO0VBQ2ZGLEtBQUssQ0FBQ0csVUFBVSxFQUFFO0FBQ3BCLENBQUMsQ0FBQztBQWtCRkMsSUFBSSxDQUFDLHVCQUF1QixrQ0FBRSxhQUFZO0VBQ3hDSixLQUFLLENBQUNLLGdCQUFnQixDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsY0FBSyxDQUFDLENBQUM7RUFFN0MsSUFBTUMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtFQUM3QixJQUFJQyxJQUFJO0VBRVIsTUFBTSxJQUFBQyxnQkFBRyxrQ0FBQyxhQUFZO0lBQ3BCRCxJQUFJLEdBQUcsSUFBQUUseUJBQU0sRUFDWCxxQkFBQyxnQkFBTztNQUNOLE9BQU8sRUFBRTtRQUNQQyxJQUFJLEVBQUUsT0FBTztRQUNiQyxHQUFHLEVBQUU7TUFDUCxDQUFFO01BQ0YsS0FBSyxFQUFFUDtJQUFZLEVBQ25CLENBQ0g7RUFFSCxDQUFDLEVBQUM7RUFFRlEsTUFBTSxDQUFDQyxtQkFBTSxDQUFDQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0VBQzlDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0osbUJBQU0sQ0FBQ0ssV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDQyxLQUFLLENBQUM7RUFFL0NDLHNCQUFTLENBQUNDLEtBQUssT0FBT1IsbUJBQU0sQ0FBQ1MsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBQ3ZEVixNQUFNLENBQUNSLFdBQVcsQ0FBQyxDQUFDbUIsY0FBYyxDQUFDcEIsY0FBSyxDQUFDO0VBQ3pDUyxNQUFNLENBQUNDLG1CQUFNLENBQUNLLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQ0MsS0FBSyxDQUFDSyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxPQUFPLENBQzNELGtGQUFrRixDQUNuRjtBQUlILENBQUMsRUFBQyJ9