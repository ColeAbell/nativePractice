baad8616291d0380f1439814d62fd209
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _HomeScreen = _interopRequireDefault(require("../UI/components/screens/HomeScreen"));
var _pokemonRequests = require("../services/pokemonRequests");
var _jsxRuntime = require("react/jsx-runtime");
global.fetch = require('jest-fetch-mock');
var content = {
  results: [{
    name: 'bulbasaur',
    url: 'https://pokeapi.co/api/v2/pokemon/1/'
  }, {
    name: 'ivysaur',
    url: 'https://pokeapi.co/api/v2/pokemon/2/'
  }, {
    name: 'venusaur',
    url: 'https://pokeapi.co/api/v2/pokemon/3/'
  }]
};
beforeEach(function () {
  fetch.resetMocks();
});
test('returns result if object', function () {
  fetch.mockResponseOnce(JSON.stringify(content));
  var onResponse = jest.fn();
  var onError = jest.fn();
  return (0, _pokemonRequests.getAllPokemon)().then(onResponse).catch(onError).finally(function () {
    expect(onResponse).toHaveBeenCalled();
    expect(onResponse.mock.calls[0][0]).toEqual(content);
    console.log(onResponse.mock.calls);
  });
});
test('Does home screen work', (0, _asyncToGenerator2.default)(function* () {
  fetch.mockResponseOnce(JSON.stringify(content));
  jest.useFakeTimers();
  var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {
      navigation: {
        setOptions: jest.fn()
      }
    })),
    getByText = _render.getByText;
  (0, _reactNative.act)(function () {
    jest.runAllTimers();
  });
  expect(_reactNative.screen.getByText('Please work')).toBeTruthy();
  expect(_reactNative.screen.getByText('venusaur')).toBeOnTheScreen();
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJmZXRjaCIsInJlcXVpcmUiLCJjb250ZW50IiwicmVzdWx0cyIsIm5hbWUiLCJ1cmwiLCJiZWZvcmVFYWNoIiwicmVzZXRNb2NrcyIsInRlc3QiLCJtb2NrUmVzcG9uc2VPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9uUmVzcG9uc2UiLCJqZXN0IiwiZm4iLCJvbkVycm9yIiwiZ2V0QWxsUG9rZW1vbiIsInRoZW4iLCJjYXRjaCIsImZpbmFsbHkiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9jayIsImNhbGxzIiwidG9FcXVhbCIsImNvbnNvbGUiLCJsb2ciLCJ1c2VGYWtlVGltZXJzIiwicmVuZGVyIiwic2V0T3B0aW9ucyIsImdldEJ5VGV4dCIsImFjdCIsInJ1bkFsbFRpbWVycyIsInNjcmVlbiIsInRvQmVUcnV0aHkiLCJ0b0JlT25UaGVTY3JlZW4iXSwic291cmNlcyI6WyJIb21lU2NyZWVuLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCBhY3R9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSG9tZVNjcmVlbiBmcm9tICcuLi9VSS9jb21wb25lbnRzL3NjcmVlbnMvSG9tZVNjcmVlbic7XG5pbXBvcnQge2dldEFsbFBva2Vtb24sIGdldE9uZVBva2Vtb259IGZyb20gJy4uL3NlcnZpY2VzL3Bva2Vtb25SZXF1ZXN0cyc7XG5cbmdsb2JhbC5mZXRjaCA9IHJlcXVpcmUoJ2plc3QtZmV0Y2gtbW9jaycpO1xuXG5sZXQgY29udGVudCA9IHtcbiAgcmVzdWx0czogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdidWxiYXNhdXInLFxuICAgICAgdXJsOiAnaHR0cHM6Ly9wb2tlYXBpLmNvL2FwaS92Mi9wb2tlbW9uLzEvJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdpdnlzYXVyJyxcbiAgICAgIHVybDogJ2h0dHBzOi8vcG9rZWFwaS5jby9hcGkvdjIvcG9rZW1vbi8yLycsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAndmVudXNhdXInLFxuICAgICAgdXJsOiAnaHR0cHM6Ly9wb2tlYXBpLmNvL2FwaS92Mi9wb2tlbW9uLzMvJyxcbiAgICB9LFxuICBdLFxufTtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGZldGNoLnJlc2V0TW9ja3MoKTtcbn0pO1xuXG50ZXN0KCdyZXR1cm5zIHJlc3VsdCBpZiBvYmplY3QnLCAoKSA9PiB7XG4gIGZldGNoLm1vY2tSZXNwb25zZU9uY2UoSlNPTi5zdHJpbmdpZnkoY29udGVudCkpO1xuICBjb25zdCBvblJlc3BvbnNlID0gamVzdC5mbigpO1xuICBjb25zdCBvbkVycm9yID0gamVzdC5mbigpO1xuICByZXR1cm4gZ2V0QWxsUG9rZW1vbigpXG4gICAgLnRoZW4ob25SZXNwb25zZSlcbiAgICAuY2F0Y2gob25FcnJvcilcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBleHBlY3Qob25SZXNwb25zZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG9uUmVzcG9uc2UubW9jay5jYWxsc1swXVswXSkudG9FcXVhbChjb250ZW50KTtcbiAgICAgIGNvbnNvbGUubG9nKG9uUmVzcG9uc2UubW9jay5jYWxscyk7XG4gICAgfSk7XG59KTtcblxudGVzdCgnRG9lcyBob21lIHNjcmVlbiB3b3JrJywgYXN5bmMgKCkgPT4ge1xuICBmZXRjaC5tb2NrUmVzcG9uc2VPbmNlKEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpKTtcbiAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyKFxuICAgIDxIb21lU2NyZWVuIG5hdmlnYXRpb249e3tzZXRPcHRpb25zOiBqZXN0LmZuKCl9fSAvPixcbiAgKTtcbiAgYWN0KCgpID0+IHtcbiAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICB9KTtcbiAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1BsZWFzZSB3b3JrJykpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3ZlbnVzYXVyJykpLnRvQmVPblRoZVNjcmVlbigpO1xuICBcbiAgXG4gIC8vY29uc3QgcG9rZXMgPSBhd2FpdCBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoJ2JvYicpO1xuICAvL2V4cGVjdChwb2tlcykudG9IYXZlTGVuZ3RoKDMpO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQXlFO0FBRXpFQSxNQUFNLENBQUNDLEtBQUssR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBRXpDLElBQUlDLE9BQU8sR0FBRztFQUNaQyxPQUFPLEVBQUUsQ0FDUDtJQUNFQyxJQUFJLEVBQUUsV0FBVztJQUNqQkMsR0FBRyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0VELElBQUksRUFBRSxTQUFTO0lBQ2ZDLEdBQUcsRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNFRCxJQUFJLEVBQUUsVUFBVTtJQUNoQkMsR0FBRyxFQUFFO0VBQ1AsQ0FBQztBQUVMLENBQUM7QUFFREMsVUFBVSxDQUFDLFlBQU07RUFDZk4sS0FBSyxDQUFDTyxVQUFVLEVBQUU7QUFDcEIsQ0FBQyxDQUFDO0FBRUZDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQ3JDUixLQUFLLENBQUNTLGdCQUFnQixDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1QsT0FBTyxDQUFDLENBQUM7RUFDL0MsSUFBTVUsVUFBVSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtFQUM1QixJQUFNQyxPQUFPLEdBQUdGLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBQ3pCLE9BQU8sSUFBQUUsOEJBQWEsR0FBRSxDQUNuQkMsSUFBSSxDQUFDTCxVQUFVLENBQUMsQ0FDaEJNLEtBQUssQ0FBQ0gsT0FBTyxDQUFDLENBQ2RJLE9BQU8sQ0FBQyxZQUFNO0lBQ2JDLE1BQU0sQ0FBQ1IsVUFBVSxDQUFDLENBQUNTLGdCQUFnQixFQUFFO0lBQ3JDRCxNQUFNLENBQUNSLFVBQVUsQ0FBQ1UsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxDQUFDdEIsT0FBTyxDQUFDO0lBQ3BEdUIsT0FBTyxDQUFDQyxHQUFHLENBQUNkLFVBQVUsQ0FBQ1UsSUFBSSxDQUFDQyxLQUFLLENBQUM7RUFDcEMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUZmLElBQUksQ0FBQyx1QkFBdUIsa0NBQUUsYUFBWTtFQUN4Q1IsS0FBSyxDQUFDUyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUNULE9BQU8sQ0FBQyxDQUFDO0VBQy9DVyxJQUFJLENBQUNjLGFBQWEsRUFBRTtFQUNwQixjQUFvQixJQUFBQyxtQkFBTSxFQUN4QixxQkFBQyxtQkFBVTtNQUFDLFVBQVUsRUFBRTtRQUFDQyxVQUFVLEVBQUVoQixJQUFJLENBQUNDLEVBQUU7TUFBRTtJQUFFLEVBQUcsQ0FDcEQ7SUFGTWdCLFNBQVMsV0FBVEEsU0FBUztFQUdoQixJQUFBQyxnQkFBRyxFQUFDLFlBQU07SUFDUmxCLElBQUksQ0FBQ21CLFlBQVksRUFBRTtFQUNyQixDQUFDLENBQUM7RUFDRlosTUFBTSxDQUFDYSxtQkFBTSxDQUFDSCxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQ0ksVUFBVSxFQUFFO0VBQ3BEZCxNQUFNLENBQUNhLG1CQUFNLENBQUNILFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDSyxlQUFlLEVBQUU7QUFLeEQsQ0FBQyxFQUFDIn0=