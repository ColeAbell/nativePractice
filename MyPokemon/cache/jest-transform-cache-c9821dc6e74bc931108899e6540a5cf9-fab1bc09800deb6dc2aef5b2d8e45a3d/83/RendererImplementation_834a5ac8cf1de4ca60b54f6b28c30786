a41aa752e3206d53eb48f63a8f49b36f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchCommand = dispatchCommand;
exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
exports.findNodeHandle = findNodeHandle;
exports.isProfilingRenderer = isProfilingRenderer;
exports.renderElement = renderElement;
exports.sendAccessibilityEvent = sendAccessibilityEvent;
exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
exports.unstable_batchedUpdates = unstable_batchedUpdates;
function renderElement(_ref) {
  var element = _ref.element,
    rootTag = _ref.rootTag,
    useFabric = _ref.useFabric,
    useConcurrentRoot = _ref.useConcurrentRoot;
  if (useFabric) {
    require('../Renderer/shims/ReactFabric').render(element, rootTag, null, useConcurrentRoot);
  } else {
    require('../Renderer/shims/ReactNative').render(element, rootTag);
  }
}
function findHostInstance_DEPRECATED(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').findHostInstance_DEPRECATED(componentOrHandle);
}
function findNodeHandle(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').findNodeHandle(componentOrHandle);
}
function dispatchCommand(handle, command, args) {
  if (global.RN$Bridgeless === true) {
    return require('../Renderer/shims/ReactFabric').dispatchCommand(handle, command, args);
  } else {
    return require('../Renderer/shims/ReactNative').dispatchCommand(handle, command, args);
  }
}
function sendAccessibilityEvent(handle, eventType) {
  return require('../Renderer/shims/ReactNative').sendAccessibilityEvent(handle, eventType);
}
function unmountComponentAtNodeAndRemoveContainer(rootTag) {
  var rootTagAsNumber = rootTag;
  require('../Renderer/shims/ReactNative').unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
}
function unstable_batchedUpdates(fn, bookkeeping) {
  return require('../Renderer/shims/ReactNative').unstable_batchedUpdates(fn, bookkeeping);
}
function isProfilingRenderer() {
  return Boolean(__DEV__);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXJFbGVtZW50IiwiZWxlbWVudCIsInJvb3RUYWciLCJ1c2VGYWJyaWMiLCJ1c2VDb25jdXJyZW50Um9vdCIsInJlcXVpcmUiLCJyZW5kZXIiLCJmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQiLCJjb21wb25lbnRPckhhbmRsZSIsImZpbmROb2RlSGFuZGxlIiwiZGlzcGF0Y2hDb21tYW5kIiwiaGFuZGxlIiwiY29tbWFuZCIsImFyZ3MiLCJnbG9iYWwiLCJSTiRCcmlkZ2VsZXNzIiwic2VuZEFjY2Vzc2liaWxpdHlFdmVudCIsImV2ZW50VHlwZSIsInVubW91bnRDb21wb25lbnRBdE5vZGVBbmRSZW1vdmVDb250YWluZXIiLCJyb290VGFnQXNOdW1iZXIiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsImZuIiwiYm9va2tlZXBpbmciLCJpc1Byb2ZpbGluZ1JlbmRlcmVyIiwiQm9vbGVhbiIsIl9fREVWX18iXSwic291cmNlcyI6WyJSZW5kZXJlckltcGxlbWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSB7RWxlbWVudCwgRWxlbWVudFJlZiwgRWxlbWVudFR5cGV9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHt0eXBlIFJvb3RUYWd9IGZyb20gJy4vUm9vdFRhZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJFbGVtZW50KHtcbiAgZWxlbWVudCxcbiAgcm9vdFRhZyxcbiAgdXNlRmFicmljLFxuICB1c2VDb25jdXJyZW50Um9vdCxcbn06IHtcbiAgZWxlbWVudDogRWxlbWVudDxFbGVtZW50VHlwZT4sXG4gIHJvb3RUYWc6IG51bWJlcixcbiAgdXNlRmFicmljOiBib29sZWFuLFxuICB1c2VDb25jdXJyZW50Um9vdDogYm9vbGVhbixcbn0pOiB2b2lkIHtcbiAgaWYgKHVzZUZhYnJpYykge1xuICAgIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0RmFicmljJykucmVuZGVyKFxuICAgICAgZWxlbWVudCxcbiAgICAgIHJvb3RUYWcsXG4gICAgICBudWxsLFxuICAgICAgdXNlQ29uY3VycmVudFJvb3QsXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLnJlbmRlcihlbGVtZW50LCByb290VGFnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEPFRFbGVtZW50VHlwZTogRWxlbWVudFR5cGU+KFxuICBjb21wb25lbnRPckhhbmRsZTogPyhFbGVtZW50UmVmPFRFbGVtZW50VHlwZT4gfCBudW1iZXIpLFxuKTogP0VsZW1lbnRSZWY8SG9zdENvbXBvbmVudDxtaXhlZD4+IHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykuZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEKFxuICAgIGNvbXBvbmVudE9ySGFuZGxlLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZE5vZGVIYW5kbGU8VEVsZW1lbnRUeXBlOiBFbGVtZW50VHlwZT4oXG4gIGNvbXBvbmVudE9ySGFuZGxlOiA/KEVsZW1lbnRSZWY8VEVsZW1lbnRUeXBlPiB8IG51bWJlciksXG4pOiA/bnVtYmVyIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykuZmluZE5vZGVIYW5kbGUoXG4gICAgY29tcG9uZW50T3JIYW5kbGUsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwYXRjaENvbW1hbmQoXG4gIGhhbmRsZTogRWxlbWVudFJlZjxIb3N0Q29tcG9uZW50PG1peGVkPj4sXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgYXJnczogQXJyYXk8bWl4ZWQ+LFxuKTogdm9pZCB7XG4gIGlmIChnbG9iYWwuUk4kQnJpZGdlbGVzcyA9PT0gdHJ1ZSkge1xuICAgIC8vIE5vdGU6IHRoaXMgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIGltcGxlbWVudGF0aW9uIGluIHRoZSBsZWdhY3kgYW5kIG5ldyByZW5kZXJlci5cbiAgICAvLyBIb3dldmVyLCBldmFsdWF0aW5nIHRoZSBvbGQgcmVuZGVyZXIgY29tZXMgd2l0aCBzb21lIHNpZGUgZWZmZWN0cy5cbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3RGYWJyaWMnKS5kaXNwYXRjaENvbW1hbmQoXG4gICAgICBoYW5kbGUsXG4gICAgICBjb21tYW5kLFxuICAgICAgYXJncyxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLmRpc3BhdGNoQ29tbWFuZChcbiAgICAgIGhhbmRsZSxcbiAgICAgIGNvbW1hbmQsXG4gICAgICBhcmdzLFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQoXG4gIGhhbmRsZTogRWxlbWVudFJlZjxIb3N0Q29tcG9uZW50PG1peGVkPj4sXG4gIGV2ZW50VHlwZTogc3RyaW5nLFxuKTogdm9pZCB7XG4gIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLnNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQoXG4gICAgaGFuZGxlLFxuICAgIGV2ZW50VHlwZSxcbiAgKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGJ5IEFwcFJlZ2lzdHJ5IHRvIHVubW91bnQgYSByb290IHdoZW4gdXNpbmcgdGhlIG9sZFxuICogUmVhY3QgTmF0aXZlIHJlbmRlcmVyIChQYXBlcikuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50QXROb2RlQW5kUmVtb3ZlQ29udGFpbmVyKHJvb3RUYWc6IFJvb3RUYWcpIHtcbiAgLy8gJEZsb3dFeHBlY3RlZEVycm9yW2luY29tcGF0aWJsZS10eXBlXSByb290VGFnIGlzIGFuIG9wYXF1ZSB0eXBlIHNvIHdlIGNhbid0IHJlYWxseSBjYXN0IGl0IGFzIGlzLlxuICBjb25zdCByb290VGFnQXNOdW1iZXI6IG51bWJlciA9IHJvb3RUYWc7XG4gIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykudW5tb3VudENvbXBvbmVudEF0Tm9kZUFuZFJlbW92ZUNvbnRhaW5lcihcbiAgICByb290VGFnQXNOdW1iZXIsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczxUPihcbiAgZm46IFQgPT4gdm9pZCxcbiAgYm9va2tlZXBpbmc6IFQsXG4pOiB2b2lkIHtcbiAgLy8gVGhpcyBkb2Vzbid0IGFjdHVhbGx5IGRvIGFueXRoaW5nIHdoZW4gYmF0Y2hpbmcgdXBkYXRlcyBmb3IgYSBGYWJyaWMgcm9vdC5cbiAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMoXG4gICAgZm4sXG4gICAgYm9va2tlZXBpbmcsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb2ZpbGluZ1JlbmRlcmVyKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gQm9vbGVhbihfX0RFVl9fKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQWVPLFNBQVNBLGFBQWEsT0FVcEI7RUFBQSxJQVRQQyxPQUFPLFFBQVBBLE9BQU87SUFDUEMsT0FBTyxRQUFQQSxPQUFPO0lBQ1BDLFNBQVMsUUFBVEEsU0FBUztJQUNUQyxpQkFBaUIsUUFBakJBLGlCQUFpQjtFQU9qQixJQUFJRCxTQUFTLEVBQUU7SUFDYkUsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNDLE1BQU0sQ0FDN0NMLE9BQU8sRUFDUEMsT0FBTyxFQUNQLElBQUksRUFDSkUsaUJBQWlCLENBQ2xCO0VBQ0gsQ0FBQyxNQUFNO0lBQ0xDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDQyxNQUFNLENBQUNMLE9BQU8sRUFBRUMsT0FBTyxDQUFDO0VBQ25FO0FBQ0Y7QUFFTyxTQUFTSywyQkFBMkIsQ0FDekNDLGlCQUF1RCxFQUNwQjtFQUNuQyxPQUFPSCxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQ0UsMkJBQTJCLENBQ3pFQyxpQkFBaUIsQ0FDbEI7QUFDSDtBQUVPLFNBQVNDLGNBQWMsQ0FDNUJELGlCQUF1RCxFQUM5QztFQUNULE9BQU9ILE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDSSxjQUFjLENBQzVERCxpQkFBaUIsQ0FDbEI7QUFDSDtBQUVPLFNBQVNFLGVBQWUsQ0FDN0JDLE1BQXdDLEVBQ3hDQyxPQUFlLEVBQ2ZDLElBQWtCLEVBQ1o7RUFDTixJQUFJQyxNQUFNLENBQUNDLGFBQWEsS0FBSyxJQUFJLEVBQUU7SUFHakMsT0FBT1YsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNLLGVBQWUsQ0FDN0RDLE1BQU0sRUFDTkMsT0FBTyxFQUNQQyxJQUFJLENBQ0w7RUFDSCxDQUFDLE1BQU07SUFDTCxPQUFPUixPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQ0ssZUFBZSxDQUM3REMsTUFBTSxFQUNOQyxPQUFPLEVBQ1BDLElBQUksQ0FDTDtFQUNIO0FBQ0Y7QUFFTyxTQUFTRyxzQkFBc0IsQ0FDcENMLE1BQXdDLEVBQ3hDTSxTQUFpQixFQUNYO0VBQ04sT0FBT1osT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNXLHNCQUFzQixDQUNwRUwsTUFBTSxFQUNOTSxTQUFTLENBQ1Y7QUFDSDtBQU1PLFNBQVNDLHdDQUF3QyxDQUFDaEIsT0FBZ0IsRUFBRTtFQUV6RSxJQUFNaUIsZUFBdUIsR0FBR2pCLE9BQU87RUFDdkNHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDYSx3Q0FBd0MsQ0FDL0VDLGVBQWUsQ0FDaEI7QUFDSDtBQUVPLFNBQVNDLHVCQUF1QixDQUNyQ0MsRUFBYSxFQUNiQyxXQUFjLEVBQ1I7RUFFTixPQUFPakIsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNlLHVCQUF1QixDQUNyRUMsRUFBRSxFQUNGQyxXQUFXLENBQ1o7QUFDSDtBQUVPLFNBQVNDLG1CQUFtQixHQUFZO0VBQzdDLE9BQU9DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO0FBQ3pCIn0=