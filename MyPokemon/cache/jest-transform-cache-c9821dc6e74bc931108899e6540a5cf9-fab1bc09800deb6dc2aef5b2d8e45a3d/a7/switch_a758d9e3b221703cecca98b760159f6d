27e7354112d8ffa9d770829cc8402d8a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Switch = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Switch = function Switch(_a) {
  var _b, _c, _d;
  var _a$value = _a.value,
    value = _a$value === void 0 ? false : _a$value,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    onValueChange = _a.onValueChange,
    _a$color = _a.color,
    color = _a$color === void 0 ? 'primary' : _a$color,
    style = _a.style,
    theme = _a.theme,
    rest = __rest(_a, ["value", "disabled", "onValueChange", "color", "style", "theme"]);
  var switchedOnColor = color === 'primary' ? ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary) ? theme.colors.primary : '' : color;
  var onTintColor = _reactNative.Platform.OS === 'ios' || !disabled ? switchedOnColor : ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.disabled) ? theme.colors.disabled : '';
  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled || !value ? (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.disabled : switchedOnColor;
  var props = _reactNative.Platform.OS === 'web' ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: switchedOnColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: ''
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Switch, Object.assign({
    value: value,
    accessibilityState: {
      checked: value,
      disabled: disabled
    },
    disabled: disabled,
    onValueChange: disabled ? undefined : onValueChange,
    style: style
  }, props, rest));
};
exports.Switch = Switch;
var _default = (0, _config.withTheme)(Switch, 'Switch');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlN3aXRjaCIsIl9hIiwiX2IiLCJfYyIsIl9kIiwidmFsdWUiLCJkaXNhYmxlZCIsIm9uVmFsdWVDaGFuZ2UiLCJjb2xvciIsInN0eWxlIiwidGhlbWUiLCJyZXN0Iiwic3dpdGNoZWRPbkNvbG9yIiwiY29sb3JzIiwicHJpbWFyeSIsIm9uVGludENvbG9yIiwiUGxhdGZvcm0iLCJPUyIsInRodW1iVGludENvbG9yIiwidW5kZWZpbmVkIiwicHJvcHMiLCJhY3RpdmVUcmFja0NvbG9yIiwidGh1bWJDb2xvciIsImFjdGl2ZVRodW1iQ29sb3IiLCJ0cmFja0NvbG9yIiwidHJ1ZSIsImZhbHNlIiwiY2hlY2tlZCIsIndpdGhUaGVtZSJdLCJzb3VyY2VzIjpbInN3aXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3dpdGNoIGFzIE5hdGl2ZVN3aXRjaCwgUGxhdGZvcm0sIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5jb25zdCBTd2l0Y2ggPSAoX2EpID0+IHtcbiAgICB2YXIgX2IsIF9jLCBfZDtcbiAgICB2YXIgeyB2YWx1ZSA9IGZhbHNlLCBkaXNhYmxlZCA9IGZhbHNlLCBvblZhbHVlQ2hhbmdlLCBjb2xvciA9ICdwcmltYXJ5Jywgc3R5bGUsIHRoZW1lIH0gPSBfYSwgcmVzdCA9IF9fcmVzdChfYSwgW1widmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcIm9uVmFsdWVDaGFuZ2VcIiwgXCJjb2xvclwiLCBcInN0eWxlXCIsIFwidGhlbWVcIl0pO1xuICAgIC8vIHN3aXRjaGVkT25Db2xvciBkZWFscyB3aXRoIHBpY2tpbmcgdXAgYSBjb2xvciBwcm92aWRlZCBhcyBwcm9wcyBieSB1c2VyIG9yIHBpY2tzIHVwIGRlZmF1bHQgdGhlbWVcbiAgICBjb25zdCBzd2l0Y2hlZE9uQ29sb3IgPSBjb2xvciA9PT0gJ3ByaW1hcnknXG4gICAgICAgID8gKChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wcmltYXJ5KVxuICAgICAgICAgICAgPyB0aGVtZS5jb2xvcnMucHJpbWFyeVxuICAgICAgICAgICAgOiAnJ1xuICAgICAgICA6IGNvbG9yO1xuICAgIGNvbnN0IG9uVGludENvbG9yID0gUGxhdGZvcm0uT1MgPT09ICdpb3MnIHx8ICFkaXNhYmxlZFxuICAgICAgICA/IHN3aXRjaGVkT25Db2xvclxuICAgICAgICA6ICgoX2MgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZGlzYWJsZWQpXG4gICAgICAgICAgICA/IHRoZW1lLmNvbG9ycy5kaXNhYmxlZFxuICAgICAgICAgICAgOiAnJztcbiAgICBjb25zdCB0aHVtYlRpbnRDb2xvciA9IFBsYXRmb3JtLk9TID09PSAnaW9zJ1xuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IGRpc2FibGVkIHx8ICF2YWx1ZVxuICAgICAgICAgICAgPyAoX2QgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZGlzYWJsZWRcbiAgICAgICAgICAgIDogc3dpdGNoZWRPbkNvbG9yO1xuICAgIGNvbnN0IHByb3BzID0gUGxhdGZvcm0uT1MgPT09ICd3ZWInXG4gICAgICAgID8ge1xuICAgICAgICAgICAgYWN0aXZlVHJhY2tDb2xvcjogb25UaW50Q29sb3IsXG4gICAgICAgICAgICB0aHVtYkNvbG9yOiB0aHVtYlRpbnRDb2xvcixcbiAgICAgICAgICAgIGFjdGl2ZVRodW1iQ29sb3I6IHN3aXRjaGVkT25Db2xvcixcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHRodW1iQ29sb3I6IHRodW1iVGludENvbG9yLFxuICAgICAgICAgICAgdHJhY2tDb2xvcjoge1xuICAgICAgICAgICAgICAgIHRydWU6IG9uVGludENvbG9yLFxuICAgICAgICAgICAgICAgIGZhbHNlOiAnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgcmV0dXJuICg8TmF0aXZlU3dpdGNoIHZhbHVlPXt2YWx1ZX0gYWNjZXNzaWJpbGl0eVN0YXRlPXt7XG4gICAgICAgICAgICBjaGVja2VkOiB2YWx1ZSxcbiAgICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICB9fSBkaXNhYmxlZD17ZGlzYWJsZWR9IG9uVmFsdWVDaGFuZ2U9e2Rpc2FibGVkID8gdW5kZWZpbmVkIDogb25WYWx1ZUNoYW5nZX0gc3R5bGU9e3N0eWxlfSB7Li4ucHJvcHN9IHsuLi5yZXN0fS8+KTtcbn07XG5leHBvcnQgeyBTd2l0Y2ggfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShTd2l0Y2gsICdTd2l0Y2gnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUFzQztBQWJ0QyxJQUFJQSxNQUFNLEdBQUksVUFBUSxTQUFLQSxNQUFNLElBQUssVUFBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSUMsQ0FBQyxJQUFJSCxDQUFDLEVBQUUsSUFBSUksTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMvRUQsQ0FBQyxDQUFDQyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxDQUFDRyxDQUFDLENBQUM7RUFDZixJQUFJSCxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQXFCLEtBQUssVUFBVSxFQUMvRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVQLENBQUMsR0FBR0MsTUFBTSxDQUFDSyxxQkFBcUIsQ0FBQ1QsQ0FBQyxDQUFDLEVBQUVVLENBQUMsR0FBR1AsQ0FBQyxDQUFDUSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJTixNQUFNLENBQUND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