fa71d81f285631f7829abe3a9b6dae3a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ditto = _interopRequireDefault(require("./ditto.json"));
var _reactNative = require("@testing-library/react-native");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _Pokemon = _interopRequireDefault(require("../UI/components/Pokemon"));
var _pokemonRequests = require("../services/pokemonRequests");
var _jsxRuntime = require("react/jsx-runtime");
global.fetch = require('jest-fetch-mock');
beforeEach(function () {
  fetch.resetMocks();
});
test('Does home screen work', (0, _asyncToGenerator2.default)(function* () {
  fetch.mockResponseOnce(JSON.stringify(_ditto.default));
  jest.useFakeTimers();
  var handlePress = jest.fn();
  yield (0, _reactNative.waitFor)(function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Pokemon.default, {
      details: {
        name: 'ditto',
        url: 'https://pokeapi.co/api/v2/pokemon/1/'
      },
      press: handlePress
    }));
  });
  yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
    jest.runAllTimers();
  }));
  expect(_reactNative.screen.getByText('ditto')).toBeTruthy();
  console.log(_reactNative.screen.getByTestId('sprite').props);
  _reactNative.fireEvent.press(yield _reactNative.screen.findByTestId('pressable'));
  expect(handlePress).toBeCalledWith(_ditto.default);
  expect(_reactNative.screen.getByTestId('sprite').props.source.uri).toEqual('https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/132.png');
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJmZXRjaCIsInJlcXVpcmUiLCJiZWZvcmVFYWNoIiwicmVzZXRNb2NrcyIsInRlc3QiLCJtb2NrUmVzcG9uc2VPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsImRpdHRvIiwiamVzdCIsInVzZUZha2VUaW1lcnMiLCJoYW5kbGVQcmVzcyIsImZuIiwid2FpdEZvciIsInJlbmRlciIsIm5hbWUiLCJ1cmwiLCJhY3QiLCJydW5BbGxUaW1lcnMiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlVHJ1dGh5IiwiY29uc29sZSIsImxvZyIsImdldEJ5VGVzdElkIiwicHJvcHMiLCJmaXJlRXZlbnQiLCJwcmVzcyIsImZpbmRCeVRlc3RJZCIsInRvQmVDYWxsZWRXaXRoIiwic291cmNlIiwidXJpIiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbIlBva2Vtb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGl0dG8gZnJvbSAnLi9kaXR0by5qc29uJztcbmltcG9ydCB7XG4gIHJlbmRlcixcbiAgc2NyZWVuLFxuICBmaXJlRXZlbnQsXG4gIGFjdCxcbiAgd2FpdEZvcixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0ICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQb2tlbW9uIGZyb20gJy4uL1VJL2NvbXBvbmVudHMvUG9rZW1vbic7XG5pbXBvcnQge2dldE9uZVBva2Vtb259IGZyb20gJy4uL3NlcnZpY2VzL3Bva2Vtb25SZXF1ZXN0cyc7XG5cbmdsb2JhbC5mZXRjaCA9IHJlcXVpcmUoJ2plc3QtZmV0Y2gtbW9jaycpO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgZmV0Y2gucmVzZXRNb2NrcygpO1xufSk7XG5cbi8qXG50ZXN0KCdyZXR1cm5zIHJlc3VsdCBpZiBvYmplY3QnLCAoKSA9PiB7XG4gIGZldGNoLm1vY2tSZXNwb25zZU9uY2UoSlNPTi5zdHJpbmdpZnkoZGl0dG8pKTtcbiAgY29uc3Qgb25SZXNwb25zZSA9IGplc3QuZm4oKTtcbiAgY29uc3Qgb25FcnJvciA9IGplc3QuZm4oKTtcbiAgcmV0dXJuIGdldE9uZVBva2Vtb24oKVxuICAgIC50aGVuKG9uUmVzcG9uc2UpXG4gICAgLmNhdGNoKG9uRXJyb3IpXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgZXhwZWN0KG9uUmVzcG9uc2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChvblJlc3BvbnNlLm1vY2suY2FsbHNbMF1bMF0pLnRvRXF1YWwoZGl0dG8pO1xuICAgICAgY29uc29sZS5sb2cob25SZXNwb25zZS5tb2NrLmNhbGxzKTtcbiAgICB9KTtcbn0pO1xuKi9cblxudGVzdCgnRG9lcyBob21lIHNjcmVlbiB3b3JrJywgYXN5bmMgKCkgPT4ge1xuICBmZXRjaC5tb2NrUmVzcG9uc2VPbmNlKEpTT04uc3RyaW5naWZ5KGRpdHRvKSk7XG4gIGplc3QudXNlRmFrZVRpbWVycygpO1xuICBjb25zdCBoYW5kbGVQcmVzcyA9IGplc3QuZm4oKTtcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFBva2Vtb25cbiAgICAgICAgZGV0YWlscz17e1xuICAgICAgICAgIG5hbWU6ICdkaXR0bycsXG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9wb2tlYXBpLmNvL2FwaS92Mi9wb2tlbW9uLzEvJyxcbiAgICAgICAgfX1cbiAgICAgICAgcHJlc3M9e2hhbmRsZVByZXNzfVxuICAgICAgLz4sXG4gICAgKTtcbiAgfSk7XG4gIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgfSk7XG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdkaXR0bycpKS50b0JlVHJ1dGh5KCk7XG4gIGNvbnNvbGUubG9nKHNjcmVlbi5nZXRCeVRlc3RJZCgnc3ByaXRlJykucHJvcHMpO1xuICAvL2NvbnNvbGUubG9nKGF3YWl0IHNjcmVlbi5maW5kQnlUZXN0SWQoJ3ByZXNzYWJsZScpKTtcbiAgZmlyZUV2ZW50LnByZXNzKGF3YWl0IHNjcmVlbi5maW5kQnlUZXN0SWQoJ3ByZXNzYWJsZScpKTtcbiAgZXhwZWN0KGhhbmRsZVByZXNzKS50b0JlQ2FsbGVkV2l0aChkaXR0byk7XG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Nwcml0ZScpLnByb3BzLnNvdXJjZS51cmkpLnRvRXF1YWwoXG4gICAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Qb2tlQVBJL3Nwcml0ZXMvbWFzdGVyL3Nwcml0ZXMvcG9rZW1vbi8xMzIucG5nJyxcbiAgKTtcblxuICAvL2NvbnN0IHBva2VzID0gYXdhaXQgc2NyZWVuLmdldEFsbEJ5VGVzdElkKCdib2InKTtcbiAgLy9leHBlY3QocG9rZXMpLnRvSGF2ZUxlbmd0aCgzKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQTBEO0FBRTFEQSxNQUFNLENBQUNDLEtBQUssR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBRXpDQyxVQUFVLENBQUMsWUFBTTtFQUNmRixLQUFLLENBQUNHLFVBQVUsRUFBRTtBQUNwQixDQUFDLENBQUM7QUFrQkZDLElBQUksQ0FBQyx1QkFBdUIsa0NBQUUsYUFBWTtFQUN4Q0osS0FBSyxDQUFDSyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUNDLGNBQUssQ0FBQyxDQUFDO0VBQzdDQyxJQUFJLENBQUNDLGFBQWEsRUFBRTtFQUNwQixJQUFNQyxXQUFXLEdBQUdGLElBQUksQ0FBQ0csRUFBRSxFQUFFO0VBQzdCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO0lBQ2xCLElBQUFDLG1CQUFNLEVBQ0oscUJBQUMsZ0JBQU87TUFDTixPQUFPLEVBQUU7UUFDUEMsSUFBSSxFQUFFLE9BQU87UUFDYkMsR0FBRyxFQUFFO01BQ1AsQ0FBRTtNQUNGLEtBQUssRUFBRUw7SUFBWSxFQUNuQixDQUNIO0VBQ0gsQ0FBQyxDQUFDO0VBQ0YsTUFBTSxJQUFBTSxnQkFBRyxrQ0FBQyxhQUFZO0lBQ3BCUixJQUFJLENBQUNTLFlBQVksRUFBRTtFQUNyQixDQUFDLEVBQUM7RUFDRkMsTUFBTSxDQUFDQyxtQkFBTSxDQUFDQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0VBQzlDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0osbUJBQU0sQ0FBQ0ssV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDQyxLQUFLLENBQUM7RUFFL0NDLHNCQUFTLENBQUNDLEtBQUssT0FBT1IsbUJBQU0sQ0FBQ1MsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBQ3ZEVixNQUFNLENBQUNSLFdBQVcsQ0FBQyxDQUFDbUIsY0FBYyxDQUFDdEIsY0FBSyxDQUFDO0VBQ3pDVyxNQUFNLENBQUNDLG1CQUFNLENBQUNLLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQ0MsS0FBSyxDQUFDSyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxPQUFPLENBQzNELGtGQUFrRixDQUNuRjtBQUlILENBQUMsRUFBQyJ9