afd7b27c43d679d9bdccfd285f77ed51
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _HomeScreen = _interopRequireDefault(require("../UI/components/screens/HomeScreen"));
var _pokemonRequests = require("../services/pokemonRequests");
var _jsxRuntime = require("react/jsx-runtime");
global.fetch = require('jest-fetch-mock');
var content = {
  results: [{
    name: 'bulbasaur',
    url: 'https://pokeapi.co/api/v2/pokemon/1/'
  }, {
    name: 'ivysaur',
    url: 'https://pokeapi.co/api/v2/pokemon/2/'
  }, {
    name: 'venusaur',
    url: 'https://pokeapi.co/api/v2/pokemon/3/'
  }]
};
beforeEach(function () {
  fetch.resetMocks();
});
test('returns result if object', function () {
  fetch.mockResponseOnce(JSON.stringify(content));
  var onResponse = jest.fn();
  var onError = jest.fn();
  return (0, _pokemonRequests.getAllPokemon)().then(onResponse).catch(onError).finally(function () {
    expect(onResponse).toHaveBeenCalled();
    expect(onResponse.mock.calls[0][0]).toEqual(content);
    console.log(onResponse.mock.calls);
  });
});
test('Does home screen work', (0, _asyncToGenerator2.default)(function* () {
  fetch.mockResponseOnce(JSON.stringify(content));
  var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {
      navigation: {
        setOptions: jest.fn()
      }
    })),
    getByText = _render.getByText;
  expect(getByText('Home')).toBeTruthy();
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJmZXRjaCIsInJlcXVpcmUiLCJjb250ZW50IiwicmVzdWx0cyIsIm5hbWUiLCJ1cmwiLCJiZWZvcmVFYWNoIiwicmVzZXRNb2NrcyIsInRlc3QiLCJtb2NrUmVzcG9uc2VPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9uUmVzcG9uc2UiLCJqZXN0IiwiZm4iLCJvbkVycm9yIiwiZ2V0QWxsUG9rZW1vbiIsInRoZW4iLCJjYXRjaCIsImZpbmFsbHkiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9jayIsImNhbGxzIiwidG9FcXVhbCIsImNvbnNvbGUiLCJsb2ciLCJyZW5kZXIiLCJzZXRPcHRpb25zIiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbIkhvbWVTY3JlZW4udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSG9tZVNjcmVlbiBmcm9tICcuLi9VSS9jb21wb25lbnRzL3NjcmVlbnMvSG9tZVNjcmVlbic7XG5pbXBvcnQge2dldEFsbFBva2Vtb24sIGdldE9uZVBva2Vtb259IGZyb20gJy4uL3NlcnZpY2VzL3Bva2Vtb25SZXF1ZXN0cyc7XG5cbmdsb2JhbC5mZXRjaCA9IHJlcXVpcmUoJ2plc3QtZmV0Y2gtbW9jaycpO1xuXG5sZXQgY29udGVudCA9IHtcbiAgcmVzdWx0czogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdidWxiYXNhdXInLFxuICAgICAgdXJsOiAnaHR0cHM6Ly9wb2tlYXBpLmNvL2FwaS92Mi9wb2tlbW9uLzEvJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdpdnlzYXVyJyxcbiAgICAgIHVybDogJ2h0dHBzOi8vcG9rZWFwaS5jby9hcGkvdjIvcG9rZW1vbi8yLycsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAndmVudXNhdXInLFxuICAgICAgdXJsOiAnaHR0cHM6Ly9wb2tlYXBpLmNvL2FwaS92Mi9wb2tlbW9uLzMvJyxcbiAgICB9LFxuICBdLFxufTtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGZldGNoLnJlc2V0TW9ja3MoKTtcbn0pO1xuXG50ZXN0KCdyZXR1cm5zIHJlc3VsdCBpZiBvYmplY3QnLCAoKSA9PiB7XG4gIGZldGNoLm1vY2tSZXNwb25zZU9uY2UoSlNPTi5zdHJpbmdpZnkoY29udGVudCkpO1xuICBjb25zdCBvblJlc3BvbnNlID0gamVzdC5mbigpO1xuICBjb25zdCBvbkVycm9yID0gamVzdC5mbigpO1xuICByZXR1cm4gZ2V0QWxsUG9rZW1vbigpXG4gICAgLnRoZW4ob25SZXNwb25zZSlcbiAgICAuY2F0Y2gob25FcnJvcilcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBleHBlY3Qob25SZXNwb25zZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG9uUmVzcG9uc2UubW9jay5jYWxsc1swXVswXSkudG9FcXVhbChjb250ZW50KTtcbiAgICAgIGNvbnNvbGUubG9nKG9uUmVzcG9uc2UubW9jay5jYWxscyk7XG4gICAgfSk7XG59KTtcblxudGVzdCgnRG9lcyBob21lIHNjcmVlbiB3b3JrJywgYXN5bmMgKCkgPT4ge1xuICBmZXRjaC5tb2NrUmVzcG9uc2VPbmNlKEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpKTtcbiAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoXG4gICAgPEhvbWVTY3JlZW4gbmF2aWdhdGlvbj17e3NldE9wdGlvbnM6IGplc3QuZm4oKX19IC8+LFxuICApO1xuICBleHBlY3QoZ2V0QnlUZXh0KCdIb21lJykpLnRvQmVUcnV0aHkoKTtcbiAgLy9jb25zdCBwb2tlcyA9IGF3YWl0IHNjcmVlbi5nZXRBbGxCeVRlc3RJZCgnYm9iJyk7XG4gIC8vZXhwZWN0KHBva2VzKS50b0hhdmVMZW5ndGgoMyk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBeUU7QUFFekVBLE1BQU0sQ0FBQ0MsS0FBSyxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFFekMsSUFBSUMsT0FBTyxHQUFHO0VBQ1pDLE9BQU8sRUFBRSxDQUNQO0lBQ0VDLElBQUksRUFBRSxXQUFXO0lBQ2pCQyxHQUFHLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDRUQsSUFBSSxFQUFFLFNBQVM7SUFDZkMsR0FBRyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0VELElBQUksRUFBRSxVQUFVO0lBQ2hCQyxHQUFHLEVBQUU7RUFDUCxDQUFDO0FBRUwsQ0FBQztBQUVEQyxVQUFVLENBQUMsWUFBTTtFQUNmTixLQUFLLENBQUNPLFVBQVUsRUFBRTtBQUNwQixDQUFDLENBQUM7QUFFRkMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDckNSLEtBQUssQ0FBQ1MsZ0JBQWdCLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDVCxPQUFPLENBQUMsQ0FBQztFQUMvQyxJQUFNVSxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBQzVCLElBQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDQyxFQUFFLEVBQUU7RUFDekIsT0FBTyxJQUFBRSw4QkFBYSxHQUFFLENBQ25CQyxJQUFJLENBQUNMLFVBQVUsQ0FBQyxDQUNoQk0sS0FBSyxDQUFDSCxPQUFPLENBQUMsQ0FDZEksT0FBTyxDQUFDLFlBQU07SUFDYkMsTUFBTSxDQUFDUixVQUFVLENBQUMsQ0FBQ1MsZ0JBQWdCLEVBQUU7SUFDckNELE1BQU0sQ0FBQ1IsVUFBVSxDQUFDVSxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUN0QixPQUFPLENBQUM7SUFDcER1QixPQUFPLENBQUNDLEdBQUcsQ0FBQ2QsVUFBVSxDQUFDVSxJQUFJLENBQUNDLEtBQUssQ0FBQztFQUNwQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRmYsSUFBSSxDQUFDLHVCQUF1QixrQ0FBRSxhQUFZO0VBQ3hDUixLQUFLLENBQUNTLGdCQUFnQixDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1QsT0FBTyxDQUFDLENBQUM7RUFDL0MsY0FBb0IsSUFBQXlCLG1CQUFNLEVBQ3hCLHFCQUFDLG1CQUFVO01BQUMsVUFBVSxFQUFFO1FBQUNDLFVBQVUsRUFBRWYsSUFBSSxDQUFDQyxFQUFFO01BQUU7SUFBRSxFQUFHLENBQ3BEO0lBRk1lLFNBQVMsV0FBVEEsU0FBUztFQUdoQlQsTUFBTSxDQUFDUyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0FBR3hDLENBQUMsRUFBQyJ9