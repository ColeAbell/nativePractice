16058793bfbe8aa8dab97845addd7eba
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Pokemon;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
var _pokemonRequests = require("../../services/pokemonRequests");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Pokemon(_ref) {
  var details = _ref.details,
    press = _ref.press;
  var _useState = (0, _react.useState)({
      sprite: '',
      allDetails: {}
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    sprite = _useState2[0],
    setSprite = _useState2[1];
  function getSprite() {
    return _getSprite.apply(this, arguments);
  }
  function _getSprite() {
    _getSprite = (0, _asyncToGenerator2.default)(function* () {
      try {
        var info = yield (0, _pokemonRequests.getOnePokemon)(details.url);
        setSprite({
          sprite: info.sprites['front_default'],
          allDetails: info
        });
      } catch (e) {
        console.error(e);
      }
    });
    return _getSprite.apply(this, arguments);
  }
  function handlePress() {
    press(sprite.allDetails);
  }
  (0, _react.useEffect)(function () {
    function setting() {
      return _setting.apply(this, arguments);
    }
    function _setting() {
      _setting = (0, _asyncToGenerator2.default)(function* () {
        yield getSprite();
      });
      return _setting.apply(this, arguments);
    }
    setting();
  }, []);
  if (sprite.sprite === '') {
    return (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      size: 'large'
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
      onPress: handlePress,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.innerContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.name,
          children: details.name
        }), (0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: sprite.sprite
          },
          style: styles.sprite,
          testID: "sprite"
        })]
      })
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  sprite: {
    width: 150,
    height: 150
  },
  container: {
    width: 180,
    height: 200,
    margin: 8,
    backgroundColor: '#7fffd4',
    borderRadius: 20,
    borderWidth: 6
  },
  innerContainer: {
    alignItems: 'center'
  },
  name: {
    marginTop: 10,
    fontStyle: 'italic',
    fontSize: 25
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb2tlbW9uIiwiZGV0YWlscyIsInByZXNzIiwidXNlU3RhdGUiLCJzcHJpdGUiLCJhbGxEZXRhaWxzIiwic2V0U3ByaXRlIiwiZ2V0U3ByaXRlIiwiaW5mbyIsImdldE9uZVBva2Vtb24iLCJ1cmwiLCJzcHJpdGVzIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImhhbmRsZVByZXNzIiwidXNlRWZmZWN0Iiwic2V0dGluZyIsInN0eWxlcyIsImNvbnRhaW5lciIsImlubmVyQ29udGFpbmVyIiwibmFtZSIsInVyaSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJ3aWR0aCIsImhlaWdodCIsIm1hcmdpbiIsImJhY2tncm91bmRDb2xvciIsImJvcmRlclJhZGl1cyIsImJvcmRlcldpZHRoIiwiYWxpZ25JdGVtcyIsIm1hcmdpblRvcCIsImZvbnRTdHlsZSIsImZvbnRTaXplIl0sInNvdXJjZXMiOlsiUG9rZW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbWFnZSxcbiAgUHJlc3NhYmxlLFxuICBTdHlsZVNoZWV0LFxuICBUZXh0LFxuICBWaWV3LFxuICBQbGF0Zm9ybSxcbiAgQWN0aXZpdHlJbmRpY2F0b3IsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVhY3QsIHt1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2dldE9uZVBva2Vtb259IGZyb20gJy4uLy4uL3NlcnZpY2VzL3Bva2Vtb25SZXF1ZXN0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBva2Vtb24oe2RldGFpbHMsIHByZXNzfSkge1xuICBjb25zdCBbc3ByaXRlLCBzZXRTcHJpdGVdID0gdXNlU3RhdGUoe3Nwcml0ZTogJycsIGFsbERldGFpbHM6IHt9fSk7XG5cbiAgYXN5bmMgZnVuY3Rpb24gZ2V0U3ByaXRlKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBpbmZvID0gYXdhaXQgZ2V0T25lUG9rZW1vbihkZXRhaWxzLnVybCk7XG4gICAgICBzZXRTcHJpdGUoe3Nwcml0ZTogaW5mby5zcHJpdGVzWydmcm9udF9kZWZhdWx0J10sIGFsbERldGFpbHM6IGluZm99KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVByZXNzKCkge1xuICAgIHByZXNzKHNwcml0ZS5hbGxEZXRhaWxzKTtcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gc2V0dGluZygpIHtcbiAgICAgIGF3YWl0IGdldFNwcml0ZSgpO1xuICAgIH1cbiAgICBzZXR0aW5nKCk7XG4gIH0sIFtdKTtcblxuICBpZiAoc3ByaXRlLnNwcml0ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gPEFjdGl2aXR5SW5kaWNhdG9yIHNpemU9eydsYXJnZSd9IC8+O1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8UHJlc3NhYmxlIG9uUHJlc3M9e2hhbmRsZVByZXNzfT5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pbm5lckNvbnRhaW5lcn0+XG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5uYW1lfT57ZGV0YWlscy5uYW1lfTwvVGV4dD5cbiAgICAgICAgICA8SW1hZ2Ugc291cmNlPXt7dXJpOiBzcHJpdGUuc3ByaXRlfX0gc3R5bGU9e3N0eWxlcy5zcHJpdGV9IHRlc3RJRD1cInNwcml0ZVwiLz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9QcmVzc2FibGU+XG4gICAgPC9WaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHNwcml0ZToge3dpZHRoOiAxNTAsIGhlaWdodDogMTUwfSxcbiAgY29udGFpbmVyOiB7XG4gICAgd2lkdGg6IDE4MCxcbiAgICBoZWlnaHQ6IDIwMCxcbiAgICBtYXJnaW46IDgsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzdmZmZkNCcsXG4gICAgYm9yZGVyUmFkaXVzOiAyMCxcbiAgICBib3JkZXJXaWR0aDogNixcbiAgfSxcbiAgaW5uZXJDb250YWluZXI6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbiAgbmFtZToge1xuICAgIG1hcmdpblRvcDogMTAsXG4gICAgZm9udFN0eWxlOiAnaXRhbGljJyxcbiAgICBmb250U2l6ZTogMjUsXG4gIH0sXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFTQTtBQUNBO0FBQTZEO0FBQUE7QUFBQTtBQUU5QyxTQUFTQSxPQUFPLE9BQW1CO0VBQUEsSUFBakJDLE9BQU8sUUFBUEEsT0FBTztJQUFFQyxLQUFLLFFBQUxBLEtBQUs7RUFDN0MsZ0JBQTRCLElBQUFDLGVBQVEsRUFBQztNQUFDQyxNQUFNLEVBQUUsRUFBRTtNQUFFQyxVQUFVLEVBQUUsQ0FBQztJQUFDLENBQUMsQ0FBQztJQUFBO0lBQTNERCxNQUFNO0lBQUVFLFNBQVM7RUFBMkMsU0FFcERDLFNBQVM7SUFBQTtFQUFBO0VBQUE7SUFBQSw2Q0FBeEIsYUFBMkI7TUFDekIsSUFBSTtRQUNGLElBQU1DLElBQUksU0FBUyxJQUFBQyw4QkFBYSxFQUFDUixPQUFPLENBQUNTLEdBQUcsQ0FBQztRQUM3Q0osU0FBUyxDQUFDO1VBQUNGLE1BQU0sRUFBRUksSUFBSSxDQUFDRyxPQUFPLENBQUMsZUFBZSxDQUFDO1VBQUVOLFVBQVUsRUFBRUc7UUFBSSxDQUFDLENBQUM7TUFDdEUsQ0FBQyxDQUFDLE9BQU9JLENBQUMsRUFBRTtRQUNWQyxPQUFPLENBQUNDLEtBQUssQ0FBQ0YsQ0FBQyxDQUFDO01BQ2xCO0lBQ0YsQ0FBQztJQUFBO0VBQUE7RUFFRCxTQUFTRyxXQUFXLEdBQUc7SUFDckJiLEtBQUssQ0FBQ0UsTUFBTSxDQUFDQyxVQUFVLENBQUM7RUFDMUI7RUFFQSxJQUFBVyxnQkFBUyxFQUFDLFlBQU07SUFBQSxTQUNDQyxPQUFPO01BQUE7SUFBQTtJQUFBO01BQUEsMkNBQXRCLGFBQXlCO1FBQ3ZCLE1BQU1WLFNBQVMsRUFBRTtNQUNuQixDQUFDO01BQUE7SUFBQTtJQUNEVSxPQUFPLEVBQUU7RUFDWCxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sSUFBSWIsTUFBTSxDQUFDQSxNQUFNLEtBQUssRUFBRSxFQUFFO0lBQ3hCLE9BQU8scUJBQUMsOEJBQWlCO01BQUMsSUFBSSxFQUFFO0lBQVEsRUFBRztFQUM3QztFQUVBLE9BQ0UscUJBQUMsaUJBQUk7SUFBQyxLQUFLLEVBQUVjLE1BQU0sQ0FBQ0MsU0FBVTtJQUFBLFVBQzVCLHFCQUFDLHNCQUFTO01BQUMsT0FBTyxFQUFFSixXQUFZO01BQUEsVUFDOUIsc0JBQUMsaUJBQUk7UUFBQyxLQUFLLEVBQUVHLE1BQU0sQ0FBQ0UsY0FBZTtRQUFBLFdBQ2pDLHFCQUFDLGlCQUFJO1VBQUMsS0FBSyxFQUFFRixNQUFNLENBQUNHLElBQUs7VUFBQSxVQUFFcEIsT0FBTyxDQUFDb0I7UUFBSSxFQUFRLEVBQy9DLHFCQUFDLGtCQUFLO1VBQUMsTUFBTSxFQUFFO1lBQUNDLEdBQUcsRUFBRWxCLE1BQU0sQ0FBQ0E7VUFBTSxDQUFFO1VBQUMsS0FBSyxFQUFFYyxNQUFNLENBQUNkLE1BQU87VUFBQyxNQUFNLEVBQUM7UUFBUSxFQUFFO01BQUE7SUFDdkU7RUFDRyxFQUNQO0FBRVg7QUFFQSxJQUFNYyxNQUFNLEdBQUdLLHVCQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQnBCLE1BQU0sRUFBRTtJQUFDcUIsS0FBSyxFQUFFLEdBQUc7SUFBRUMsTUFBTSxFQUFFO0VBQUcsQ0FBQztFQUNqQ1AsU0FBUyxFQUFFO0lBQ1RNLEtBQUssRUFBRSxHQUFHO0lBQ1ZDLE1BQU0sRUFBRSxHQUFHO0lBQ1hDLE1BQU0sRUFBRSxDQUFDO0lBQ1RDLGVBQWUsRUFBRSxTQUFTO0lBQzFCQyxZQUFZLEVBQUUsRUFBRTtJQUNoQkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEVixjQUFjLEVBQUU7SUFDZFcsVUFBVSxFQUFFO0VBQ2QsQ0FBQztFQUNEVixJQUFJLEVBQUU7SUFDSlcsU0FBUyxFQUFFLEVBQUU7SUFDYkMsU0FBUyxFQUFFLFFBQVE7SUFDbkJDLFFBQVEsRUFBRTtFQUNaO0FBQ0YsQ0FBQyxDQUFDIn0=