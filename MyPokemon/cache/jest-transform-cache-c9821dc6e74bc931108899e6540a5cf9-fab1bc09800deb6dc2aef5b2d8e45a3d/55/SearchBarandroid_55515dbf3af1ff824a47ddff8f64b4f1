1444073d240e998a116acba95c5e6695
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _Input = _interopRequireDefault(require("../input/Input"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var defaultSearchIcon = function defaultSearchIcon(theme) {
  var _a, _b, _c;
  return {
    type: 'material',
    size: 25,
    color: (_c = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.platform) === null || _b === void 0 ? void 0 : _b.android) === null || _c === void 0 ? void 0 : _c.grey,
    name: 'search'
  };
};
var defaultCancelIcon = function defaultCancelIcon(theme) {
  var _a, _b, _c;
  return {
    type: 'material',
    size: 25,
    color: (_c = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.platform) === null || _b === void 0 ? void 0 : _b.android) === null || _c === void 0 ? void 0 : _c.grey,
    name: 'arrow-back'
  };
};
var defaultClearIcon = function defaultClearIcon(theme) {
  var _a, _b, _c;
  return {
    type: 'material',
    size: 25,
    color: (_c = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.platform) === null || _b === void 0 ? void 0 : _b.android) === null || _c === void 0 ? void 0 : _c.grey,
    name: 'clear'
  };
};
var SearchBar = function (_Component) {
  (0, _inherits2.default)(SearchBar, _Component);
  var _super = _createSuper(SearchBar);
  function SearchBar(props) {
    var _this;
    (0, _classCallCheck2.default)(this, SearchBar);
    _this = _super.call(this, props);
    _this.focus = function () {
      _this.input.focus();
    };
    _this.blur = function () {
      _this.input.blur();
    };
    _this.clear = function () {
      _this.input.clear();
      _this.onChangeText('');
      _this.props.onClear();
    };
    _this.cancel = function () {
      _this.blur();
      _this.props.onCancel();
    };
    _this.onFocus = function (event) {
      _this.props.onFocus(event);
      _this.setState({
        hasFocus: true,
        isEmpty: _this.props.value === ''
      });
    };
    _this.onBlur = function (event) {
      _this.props.onBlur(event);
      _this.setState({
        hasFocus: false
      });
    };
    _this.onChangeText = function (text) {
      _this.props.onChangeText(text);
      _this.setState({
        isEmpty: text === ''
      });
    };
    _this._keyboardDidHide = function () {
      _this.cancel();
    };
    var _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value;
    _this.state = {
      hasFocus: false,
      isEmpty: value ? value === '' : true
    };
    _reactNative.Keyboard.addListener('keyboardDidHide', _this._keyboardDidHide);
    return _this;
  }
  (0, _createClass2.default)(SearchBar, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.Keyboard.removeListener('keyboardDidHide', this._keyboardDidHide);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _a;
      var _b = this.props,
        theme = _b.theme,
        _b$clearIcon = _b.clearIcon,
        clearIcon = _b$clearIcon === void 0 ? {
          name: 'clear'
        } : _b$clearIcon,
        containerStyle = _b.containerStyle,
        leftIconContainerStyle = _b.leftIconContainerStyle,
        rightIconContainerStyle = _b.rightIconContainerStyle,
        inputContainerStyle = _b.inputContainerStyle,
        inputStyle = _b.inputStyle,
        _b$searchIcon = _b.searchIcon,
        searchIcon = _b$searchIcon === void 0 ? {
          name: 'search'
        } : _b$searchIcon,
        _b$cancelIcon = _b.cancelIcon,
        cancelIcon = _b$cancelIcon === void 0 ? {
          name: 'arrow-back'
        } : _b$cancelIcon,
        _b$showLoading = _b.showLoading,
        showLoading = _b$showLoading === void 0 ? false : _b$showLoading,
        _b$loadingProps = _b.loadingProps,
        loadingProps = _b$loadingProps === void 0 ? {} : _b$loadingProps,
        attributes = __rest(_b, ["theme", "clearIcon", "containerStyle", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "searchIcon", "cancelIcon", "showLoading", "loadingProps"]);
      var _this$state = this.state,
        hasFocus = _this$state.hasFocus,
        isEmpty = _this$state.isEmpty;
      var loadingStyle = loadingProps.style,
        otherLoadingProps = __rest(loadingProps, ["style"]);
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([{
          backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white,
          paddingTop: 8,
          paddingBottom: 8
        }, containerStyle]),
        children: (0, _jsxRuntime.jsx)(_Input.default, Object.assign({
          testID: "searchInput",
          renderErrorMessage: false
        }, attributes, {
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onChangeText: this.onChangeText,
          ref: function ref(input) {
            _this2.input = input;
          },
          containerStyle: {
            paddingHorizontal: 0
          },
          inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
          inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, inputContainerStyle]),
          leftIcon: hasFocus ? (0, _helpers.renderNode)(_Icon.default, cancelIcon, Object.assign(Object.assign({}, defaultCancelIcon(theme)), {
            onPress: this.cancel
          })) : (0, _helpers.renderNode)(_Icon.default, searchIcon, defaultSearchIcon(theme)),
          leftIconContainerStyle: _reactNative.StyleSheet.flatten([styles.leftIconContainerStyle, leftIconContainerStyle]),
          rightIcon: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: {
              flexDirection: 'row'
            },
            children: [showLoading && (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, Object.assign({
              style: _reactNative.StyleSheet.flatten([{
                marginRight: 5
              }, loadingStyle])
            }, otherLoadingProps), "loading"), !isEmpty && (0, _helpers.renderNode)(_Icon.default, clearIcon, Object.assign(Object.assign({}, defaultClearIcon(theme)), {
              key: 'cancel',
              onPress: this.clear
            }))]
          }),
          rightIconContainerStyle: _reactNative.StyleSheet.flatten([styles.rightIconContainerStyle, rightIconContainerStyle])
        }))
      });
    }
  }]);
  return SearchBar;
}(_react.Component);
SearchBar.defaultProps = {
  onClear: function onClear() {
    return null;
  },
  onCancel: function onCancel() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onChangeText: function onChangeText() {
    return null;
  }
};
var styles = _reactNative.StyleSheet.create({
  input: {
    marginLeft: 24,
    marginRight: 8
  },
  inputContainer: {
    borderBottomWidth: 0,
    width: '100%'
  },
  rightIconContainerStyle: {
    marginRight: 8
  },
  leftIconContainerStyle: {
    marginLeft: 8
  }
});
var _default = SearchBar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,