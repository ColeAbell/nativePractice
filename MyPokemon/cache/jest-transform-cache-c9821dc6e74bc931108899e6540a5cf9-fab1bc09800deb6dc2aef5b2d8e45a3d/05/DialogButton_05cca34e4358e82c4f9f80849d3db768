cc4527f1493557e4ef19e35f0d2a7cd4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Button = _interopRequireDefault(require("../buttons/Button"));
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var DialogButton = function DialogButton(_a) {
  var titleStyle = _a.titleStyle,
    rest = __rest(_a, ["titleStyle"]);
  return (0, _jsxRuntime.jsx)(_Button.default, Object.assign({
    style: {
      marginLeft: 5
    },
    titleStyle: _reactNative.StyleSheet.flatten([styles.buttonTitle, titleStyle]),
    containerStyle: {
      width: 'auto'
    },
    testID: "Dialog__Button"
  }, rest));
};
DialogButton.defaultProps = {
  title: 'ACTION',
  type: 'clear'
};
var styles = _reactNative.StyleSheet.create({
  buttonTitle: {
    fontSize: 15,
    fontWeight: '500'
  }
});
var _default = (0, _config.withTheme)(DialogButton, 'DialogButton');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkRpYWxvZ0J1dHRvbiIsIl9hIiwidGl0bGVTdHlsZSIsInJlc3QiLCJtYXJnaW5MZWZ0IiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJzdHlsZXMiLCJidXR0b25UaXRsZSIsIndpZHRoIiwiZGVmYXVsdFByb3BzIiwidGl0bGUiLCJ0eXBlIiwiY3JlYXRlIiwiZm9udFNpemUiLCJmb250V2VpZ2h0Iiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiRGlhbG9nQnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9ucy9CdXR0b24nO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmNvbnN0IERpYWxvZ0J1dHRvbiA9IChfYSkgPT4ge1xuICAgIHZhciB7IHRpdGxlU3R5bGUgfSA9IF9hLCByZXN0ID0gX19yZXN0KF9hLCBbXCJ0aXRsZVN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxCdXR0b24gc3R5bGU9e3sgbWFyZ2luTGVmdDogNSB9fSB0aXRsZVN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW3N0eWxlcy5idXR0b25UaXRsZSwgdGl0bGVTdHlsZV0pfSBjb250YWluZXJTdHlsZT17e1xuICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgICAgfX0gdGVzdElEPVwiRGlhbG9nX19CdXR0b25cIiB7Li4ucmVzdH0vPik7XG59O1xuRGlhbG9nQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgICB0aXRsZTogJ0FDVElPTicsXG4gICAgdHlwZTogJ2NsZWFyJyxcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgYnV0dG9uVGl0bGU6IHtcbiAgICAgICAgZm9udFNpemU6IDE1LFxuICAgICAgICBmb250V2VpZ2h0OiAnNTAwJyxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRGlhbG9nQnV0dG9uLCAnRGlhbG9nQnV0dG9uJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUFzQztBQWR0QyxJQUFJQSxNQUFNLEdBQUksVUFBUSxTQUFLQSxNQUFNLElBQUssVUFBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSUMsQ0FBQyxJQUFJSCxDQUFDLEVBQUUsSUFBSUksTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMvRUQsQ0FBQyxDQUFDQyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxDQUFDRyxDQUFDLENBQUM7RUFDZixJQUFJSCxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQXFCLEtBQUssVUFBVSxFQUMvRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVQLENBQUMsR0FBR0MsTUFBTSxDQUFDSyxxQkFBcUIsQ0FBQ1QsQ0FBQyxDQUFDLEVBQUVVLENBQUMsR0FBR1AsQ0FBQyxDQUFDUSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3BFLElBQUlULENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJTixNQUFNLENBQUNDLFNBQVMsQ0FBQ08sb0JBQW9CLENBQUNMLElBQUksQ0FBQ1AsQ0FBQyxFQUFFRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDLEVBQzFFUixDQUFDLENBQUNDLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBR1YsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLENBQUMsQ0FBQyxDQUFDO0VBQ3pCO0VBQ0osT0FBT1IsQ0FBQztBQUNaLENBQUM7QUFLRCxJQUFNVyxZQUFZLEdBQUcsU0FBZkEsWUFBWSxDQUFJQyxFQUFFLEVBQUs7RUFDckIsSUFBRUMsVUFBVSxHQUFLRCxFQUFFLENBQWpCQyxVQUFVO0lBQVNDLElBQUksR0FBR2pCLE1BQU0sQ0FBQ2UsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7RUFDMUQsT0FBUSxxQkFBQyxlQUFNO0lBQUMsS0FBSyxFQUFFO01BQUVHLFVBQVUsRUFBRTtJQUFFLENBQUU7SUFBQyxVQUFVLEVBQUVDLHVCQUFVLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxNQUFNLENBQUNDLFdBQVcsRUFBRU4sVUFBVSxDQUFDLENBQUU7SUFBQyxjQUFjLEVBQUU7TUFDcEhPLEtBQUssRUFBRTtJQUNYLENBQUU7SUFBQyxNQUFNLEVBQUM7RUFBZ0IsR0FBS04sSUFBSSxFQUFHO0FBQzlDLENBQUM7QUFDREgsWUFBWSxDQUFDVSxZQUFZLEdBQUc7RUFDeEJDLEtBQUssRUFBRSxRQUFRO0VBQ2ZDLElBQUksRUFBRTtBQUNWLENBQUM7QUFDRCxJQUFNTCxNQUFNLEdBQUdGLHVCQUFVLENBQUNRLE1BQU0sQ0FBQztFQUM3QkwsV0FBVyxFQUFFO0lBQ1RNLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRTtFQUNoQjtBQUNKLENBQUMsQ0FBQztBQUFDLGVBQ1ksSUFBQUMsaUJBQVMsRUFBQ2hCLFlBQVksRUFBRSxjQUFjLENBQUM7QUFBQSJ9