a4c058d108d9916ee3d0154c907f7317
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Slider = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var TRACK_SIZE = 4;
var THUMB_SIZE = 40;
var TRACK_STYLE = _reactNative.Platform.select({
  web: 0,
  default: -1
});
var DEFAULT_ANIMATION_CONFIGS = {
  spring: {
    friction: 7,
    tension: 100,
    useNativeDriver: true
  },
  timing: {
    duration: 150,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    delay: 0,
    useNativeDriver: true
  }
};
var getBoundedValue = function getBoundedValue(value, maximumValue, minimumValue) {
  return Math.max(Math.min(value, maximumValue), minimumValue);
};
var Rect = function () {
  function Rect(x, y, width, height) {
    (0, _classCallCheck2.default)(this, Rect);
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  (0, _createClass2.default)(Rect, [{
    key: "containsPoint",
    value: function containsPoint(x, y) {
      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;
    }
  }]);
  return Rect;
}();
var Slider = function Slider(props) {
  var _previousLeft = (0, _react.useRef)(0);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    allMeasured = _useState2[0],
    setAllMeasured = _useState2[1];
  var _useState3 = (0, _react.useState)({
      width: 0,
      height: 0
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    containerSize = _useState4[0],
    setContainerSize = _useState4[1];
  var _useState5 = (0, _react.useState)({
      width: 0,
      height: 0
    }),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    trackSize = _useState6[0],
    setTrackSize = _useState6[1];
  var _useState7 = (0, _react.useState)({
      width: 0,
      height: 0
    }),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    thumbSize = _useState8[0],
    setThumbSize = _useState8[1];
  var containerSizeValue = (0, _react.useRef)(containerSize);
  var trackSizeValue = (0, _react.useRef)(trackSize);
  var thumbSizeValue = (0, _react.useRef)(thumbSize);
  var isVertical = (0, _react.useRef)(props.orientation === 'vertical');
  var _useState9 = (0, _react.useState)(new _reactNative.Animated.Value(getBoundedValue(props.value || 0, props.maximumValue || 1, props.minimumValue || 0))),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 1),
    value = _useState10[0];
  (0, _react.useEffect)(function () {
    containerSizeValue.current = containerSize;
  }, [containerSize]);
  (0, _react.useEffect)(function () {
    trackSizeValue.current = trackSize;
  }, [trackSize]);
  (0, _react.useEffect)(function () {
    thumbSizeValue.current = thumbSize;
  }, [thumbSize]);
  var measureContainer = function measureContainer(x) {
    handleMeasure('containerSize', x);
  };
  var measureTrack = function measureTrack(x) {
    handleMeasure('trackSize', x);
  };
  var measureThumb = function measureThumb(x) {
    handleMeasure('thumbSize', x);
  };
  var handleMeasure = function handleMeasure(name, x) {
    var _x$nativeEvent$layout = x.nativeEvent.layout,
      layoutWidth = _x$nativeEvent$layout.width,
      layoutHeight = _x$nativeEvent$layout.height;
    var width = isVertical.current ? layoutHeight : layoutWidth;
    var height = isVertical.current ? layoutWidth : layoutHeight;
    var size = {
      width: width,
      height: height
    };
    if (name === 'containerSize') {
      setContainerSize(size);
    }
    if (name === 'thumbSize') {
      setThumbSize(size);
    }
    if (name === 'trackSize') {
      setTrackSize(size);
    }
    if (thumbSize && trackSize && containerSize) {
      setAllMeasured(true);
    }
  };
  var currentPropValue = (0, _react.useRef)(props.value || 0);
  var prevPropValue = (0, _react.useRef)(0);
  var didMountRef = (0, _react.useRef)(false);
  var setCurrentValue = _react.default.useCallback(function (value1) {
    value.setValue(value1);
  }, [value]);
  _react.default.useEffect(function () {
    setCurrentValue(props.value || 0);
  }, [props.value, setCurrentValue]);
  (0, _react.useEffect)(function () {
    prevPropValue.current = props.value || 0;
    if (didMountRef.current) {
      var newValue = getBoundedValue(props.value || 0, props.maximumValue || 1, props.minimumValue || 0);
      if (prevPropValue.current !== newValue) {
        if (props.animateTransitions) {
          setCurrentValueAnimated(new _reactNative.Animated.Value(newValue));
        } else {
          setCurrentValue(newValue);
        }
      }
    } else {
      didMountRef.current = true;
    }
  });
  var setCurrentValueAnimated = function setCurrentValueAnimated(value1) {
    var animationType = props.animationType;
    var animationConfig = Object.assign({}, DEFAULT_ANIMATION_CONFIGS[animationType || 'timing'], props.animationConfig, {
      toValue: value1
    });
    _reactNative.Animated[animationType || 'timing'](value, animationConfig).start();
  };
  var handleMoveShouldSetPanResponder = function handleMoveShouldSetPanResponder() {
    if (!TRACK_STYLE) {
      return true;
    }
    return false;
  };
  var handlePanResponderGrant = function handlePanResponderGrant() {
    _previousLeft.current = getThumbLeft(currentPropValue.current);
    fireChangeEvent('onSlidingStart');
  };
  var handlePanResponderMove = function handlePanResponderMove(_, gestureState) {
    if (props.disabled) {
      return;
    }
    setCurrentValue(getValue(gestureState));
    fireChangeEvent('onValueChange');
  };
  var handlePanResponderRequestEnd = function handlePanResponderRequestEnd() {
    return false;
  };
  var handlePanResponderEnd = function handlePanResponderEnd(_, gestureState) {
    if (props.disabled) {
      return;
    }
    setCurrentValue(getValue(gestureState));
    fireChangeEvent('onSlidingComplete');
  };
  var thumbHitTest = function thumbHitTest(_ref) {
    var nativeEvent = _ref.nativeEvent;
    var thumbTouchRect = getThumbTouchRect();
    return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);
  };
  var handleStartShouldSetPanResponder = function handleStartShouldSetPanResponder(e) {
    if (!props.allowTouchTrack && !TRACK_STYLE) {
      return thumbHitTest(e);
    }
    if (!trackStyle) {
      setCurrentValue(getOnTouchValue(e));
    }
    fireChangeEvent('onValueChange');
    return true;
  };
  var fireChangeEvent = function fireChangeEvent(event) {
    var _a;
    if (props === null || props === void 0 ? void 0 : props[event]) {
      (_a = props === null || props === void 0 ? void 0 : props[event]) === null || _a === void 0 ? void 0 : _a.call(props, currentPropValue.current);
    }
  };
  var getOnTouchValue = function getOnTouchValue(_ref2) {
    var nativeEvent = _ref2.nativeEvent;
    var location = isVertical.current ? nativeEvent.locationY : nativeEvent.locationX;
    return getValueForTouch(location);
  };
  var getValueForTouch = function getValueForTouch(location) {
    var length = containerSizeValue.current.width - thumbSizeValue.current.width;
    var ratio = location / length;
    var newValue = ratio * ((props.maximumValue || 1) - (props.minimumValue || 0));
    if (props.step) {
      newValue = Math.round(newValue / props.step) * props.step;
    }
    return getBoundedValue(newValue + (props.minimumValue || 0), props.maximumValue || 1, props.minimumValue || 0);
  };
  var getTouchOverflowSize = function getTouchOverflowSize() {
    var thumbTouchSize = props.thumbTouchSize;
    var size = {};
    if (allMeasured === true) {
      size.width = Math.max(0, ((thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.width) || THUMB_SIZE) - thumbSizeValue.current.width);
      size.height = Math.max(0, ((thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.height) || THUMB_SIZE) - containerSizeValue.current.height);
    }
    return size;
  };
  var getTouchOverflowStyle = function getTouchOverflowStyle() {
    var _getTouchOverflowSize = getTouchOverflowSize(),
      width = _getTouchOverflowSize.width,
      height = _getTouchOverflowSize.height;
    var touchOverflowStyle = {};
    if (width !== undefined && height !== undefined) {
      var verticalMargin = -height / 2;
      touchOverflowStyle.marginTop = verticalMargin;
      touchOverflowStyle.marginBottom = verticalMargin;
      var horizontalMargin = -width / 2;
      touchOverflowStyle.marginLeft = horizontalMargin;
      touchOverflowStyle.marginRight = horizontalMargin;
    }
    if (props.debugTouchArea === true) {
      touchOverflowStyle.backgroundColor = 'orange';
      touchOverflowStyle.opacity = 0.5;
    }
    return touchOverflowStyle;
  };
  var getValue = function getValue(gestureState) {
    var location = _previousLeft.current + (isVertical.current ? gestureState.dy : gestureState.dx);
    return getValueForTouch(location);
  };
  _react.default.useEffect(function () {
    var listenerID = value.addListener(function (obj) {
      currentPropValue.current = obj.value;
    });
    return function () {
      value.removeListener(listenerID);
    };
  });
  var getRatio = function getRatio(value1) {
    return (value1 - (props.minimumValue || 0)) / ((props.maximumValue || 1) - (props.minimumValue || 0));
  };
  var getThumbLeft = function getThumbLeft(value1) {
    var ratio = getRatio(value1);
    return ratio * (containerSizeValue.current.width - thumbSizeValue.current.width);
  };
  var getThumbTouchRect = function getThumbTouchRect() {
    var thumbTouchSize = props.thumbTouchSize;
    var touchOverflowSize = getTouchOverflowSize();
    var height = (touchOverflowSize === null || touchOverflowSize === void 0 ? void 0 : touchOverflowSize.height) / 2 + (containerSizeValue.current.height - ((thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.height) || THUMB_SIZE)) / 2;
    var width = touchOverflowSize.width / 2 + getThumbLeft(currentPropValue.current) + (thumbSizeValue.current.width - ((thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.width) || THUMB_SIZE)) / 2;
    if (isVertical.current) {
      return new Rect(height, width, (thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.width) || THUMB_SIZE, (thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.height) || THUMB_SIZE);
    }
    return new Rect(width, height, (thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.width) || THUMB_SIZE, (thumbTouchSize === null || thumbTouchSize === void 0 ? void 0 : thumbTouchSize.height) || THUMB_SIZE);
  };
  var renderDebugThumbTouchRect = function renderDebugThumbTouchRect(thumbLeft) {
    var thumbTouchRect = getThumbTouchRect();
    var positionStyle = {
      left: thumbLeft,
      top: thumbTouchRect.y,
      width: thumbTouchRect.width,
      height: thumbTouchRect.height
    };
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: positionStyle,
      pointerEvents: "none"
    });
  };
  var getMinimumTrackStyles = function getMinimumTrackStyles(thumbStart) {
    var minimumTrackStyle = {
      position: 'absolute'
    };
    if (isVertical.current) {
      minimumTrackStyle.height = _reactNative.Animated.add(thumbStart, thumbSizeValue.current.height / 2);
      minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;
    } else {
      minimumTrackStyle.width = _reactNative.Animated.add(thumbStart, thumbSizeValue.current.width / 2);
      minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;
    }
    return minimumTrackStyle;
  };
  var panResponder = (0, _react.useRef)(_reactNative.PanResponder.create({
    onStartShouldSetPanResponder: handleStartShouldSetPanResponder,
    onMoveShouldSetPanResponder: handleMoveShouldSetPanResponder,
    onPanResponderGrant: handlePanResponderGrant,
    onPanResponderMove: handlePanResponderMove,
    onPanResponderRelease: handlePanResponderEnd,
    onPanResponderTerminationRequest: handlePanResponderRequestEnd,
    onPanResponderTerminate: handlePanResponderEnd
  })).current;
  var minimumValue = props.minimumValue,
    maximumValue = props.maximumValue,
    minimumTrackTintColor = props.minimumTrackTintColor,
    maximumTrackTintColor = props.maximumTrackTintColor,
    thumbTintColor = props.thumbTintColor,
    containerStyle = props.containerStyle,
    style = props.style,
    trackStyle = props.trackStyle,
    thumbStyle = props.thumbStyle,
    thumbProps = props.thumbProps,
    debugTouchArea = props.debugTouchArea,
    other = __rest(props, ["minimumValue", "maximumValue", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "containerStyle", "style", "trackStyle", "thumbStyle", "thumbProps", "debugTouchArea"]);
  var mainStyles = containerStyle || styles;
  var appliedTrackStyle = _reactNative.StyleSheet.flatten([styles.track, trackStyle]);
  var thumbStart = value.interpolate({
    inputRange: [minimumValue || 0, maximumValue || 1],
    outputRange: [0, containerSize.width - thumbSize.width]
  });
  var valueVisibleStyle = {};
  if (!allMeasured) {
    valueVisibleStyle.height = 0;
    valueVisibleStyle.width = 0;
  }
  var minimumTrackStyle = Object.assign(Object.assign(Object.assign({}, getMinimumTrackStyles(thumbStart)), {
    backgroundColor: minimumTrackTintColor
  }), valueVisibleStyle);
  var touchOverflowStyle = getTouchOverflowStyle();
  return (0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({}, other, {
    style: _reactNative.StyleSheet.flatten([isVertical.current ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),
    onLayout: measureContainer,
    accessibilityRole: "adjustable",
    accessibilityValue: {
      min: minimumValue,
      max: maximumValue,
      now: props.value
    },
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([mainStyles.track, isVertical.current ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, {
        backgroundColor: maximumTrackTintColor
      }]),
      onLayout: measureTrack
    }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: _reactNative.StyleSheet.flatten([mainStyles.track, isVertical.current ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, minimumTrackStyle])
    }), (0, _jsxRuntime.jsx)(SliderThumb, Object.assign({
      isVisible: allMeasured,
      onLayout: measureThumb,
      style: thumbStyle,
      color: thumbTintColor,
      start: thumbStart,
      vertical: isVertical.current
    }, thumbProps)), (0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({
      style: _reactNative.StyleSheet.flatten([styles.touchArea, touchOverflowStyle])
    }, panResponder.panHandlers, {
      children: debugTouchArea === true && renderDebugThumbTouchRect(thumbStart)
    }))]
  }));
};
exports.Slider = Slider;
var SliderThumb = function SliderThumb(_a) {
  var Component = _a.Component,
    isVisible = _a.isVisible,
    onLayout = _a.onLayout,
    style = _a.style,
    start = _a.start,
    color = _a.color,
    vertical = _a.vertical,
    props = __rest(_a, ["Component", "isVisible", "onLayout", "style", "start", "color", "vertical"]);
  var ThumbComponent = Component || _reactNative.Animated.View;
  var axis = vertical ? 'translateY' : 'translateX';
  var thumbPosition = [(0, _defineProperty2.default)({}, axis, start)];
  var styleTransform = style && style.transform || [];
  var visibleStyle = isVisible ? {} : {
    height: 0,
    width: 0
  };
  return (0, _jsxRuntime.jsx)(ThumbComponent, Object.assign({
    testID: "sliderThumb",
    onLayout: onLayout,
    style: _reactNative.StyleSheet.flatten([Object.assign({
      backgroundColor: color,
      transform: [].concat(thumbPosition, (0, _toConsumableArray2.default)(styleTransform))
    }, visibleStyle), styles.thumb, style])
  }, props));
};
Slider.defaultProps = {
  value: 0,
  minimumValue: 0,
  maximumValue: 1,
  step: 0,
  minimumTrackTintColor: '#3f3f3f',
  maximumTrackTintColor: '#b3b3b3',
  allowTouchTrack: false,
  thumbTintColor: 'red',
  thumbTouchSize: {
    width: THUMB_SIZE,
    height: THUMB_SIZE
  },
  debugTouchArea: false,
  animationType: 'timing',
  orientation: 'horizontal'
};
var styles = _reactNative.StyleSheet.create({
  containerHorizontal: {
    height: 40,
    justifyContent: 'center'
  },
  containerVertical: {
    width: 40,
    flexDirection: 'column',
    alignItems: 'center'
  },
  track: {
    borderRadius: TRACK_SIZE / 2
  },
  trackHorizontal: {
    height: TRACK_SIZE
  },
  trackVertical: {
    flex: 1,
    width: TRACK_SIZE
  },
  thumb: {
    position: 'absolute',
    width: THUMB_SIZE,
    height: THUMB_SIZE,
    borderRadius: THUMB_SIZE / 2
  },
  touchArea: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  debugThumbTouchArea: {
    position: 'absolute',
    backgroundColor: 'green',
    opacity: 0.5
  }
});
var _default = (0, _config.withTheme)(Slider, 'Slider');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,