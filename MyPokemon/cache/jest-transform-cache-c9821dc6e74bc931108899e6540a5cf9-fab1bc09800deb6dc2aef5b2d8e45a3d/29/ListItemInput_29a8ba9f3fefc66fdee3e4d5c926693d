e578c8fb60b0fe4081ff154e7cd48796
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Input = _interopRequireDefault(require("../input/Input"));
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListItemInput = function ListItemInput(_a) {
  var inputStyle = _a.inputStyle,
    inputContainerStyle = _a.inputContainerStyle,
    containerStyle = _a.containerStyle,
    props = __rest(_a, ["inputStyle", "inputContainerStyle", "containerStyle"]);
  return (0, _jsxRuntime.jsx)(_Input.default, Object.assign({
    renderErrorMessage: false
  }, props, {
    inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
    inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, inputContainerStyle]),
    containerStyle: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
  }));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    paddingRight: 0
  },
  inputContainer: {
    flex: 1,
    borderBottomWidth: 0,
    width: null,
    height: null
  },
  input: {
    flex: 1,
    textAlign: 'right',
    width: null,
    height: null
  }
});
var _default = (0, _config.withTheme)(ListItemInput, 'ListItemInput');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkxpc3RJdGVtSW5wdXQiLCJfYSIsImlucHV0U3R5bGUiLCJpbnB1dENvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyU3R5bGUiLCJwcm9wcyIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwiaW5wdXQiLCJpbnB1dENvbnRhaW5lciIsImNvbnRhaW5lciIsImNyZWF0ZSIsImZsZXgiLCJwYWRkaW5nUmlnaHQiLCJib3JkZXJCb3R0b21XaWR0aCIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dEFsaWduIiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiTGlzdEl0ZW1JbnB1dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL2lucHV0L0lucHV0JztcbmNvbnN0IExpc3RJdGVtSW5wdXQgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBpbnB1dFN0eWxlLCBpbnB1dENvbnRhaW5lclN0eWxlLCBjb250YWluZXJTdHlsZSB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJpbnB1dFN0eWxlXCIsIFwiaW5wdXRDb250YWluZXJTdHlsZVwiLCBcImNvbnRhaW5lclN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxJbnB1dCByZW5kZXJFcnJvck1lc3NhZ2U9e2ZhbHNlfSB7Li4ucHJvcHN9IGlucHV0U3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmlucHV0LCBpbnB1dFN0eWxlXSl9IGlucHV0Q29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICBzdHlsZXMuaW5wdXRDb250YWluZXIsXG4gICAgICAgICAgICBpbnB1dENvbnRhaW5lclN0eWxlLFxuICAgICAgICBdKX0gY29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmNvbnRhaW5lciwgY29udGFpbmVyU3R5bGVdKX0vPik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBmbGV4OiAxLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IDAsXG4gICAgfSxcbiAgICBpbnB1dENvbnRhaW5lcjoge1xuICAgICAgICBmbGV4OiAxLFxuICAgICAgICBib3JkZXJCb3R0b21XaWR0aDogMCxcbiAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgIGhlaWdodDogbnVsbCxcbiAgICB9LFxuICAgIGlucHV0OiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgIGhlaWdodDogbnVsbCxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTGlzdEl0ZW1JbnB1dCwgJ0xpc3RJdGVtSW5wdXQnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQW1DO0FBZG5DLElBQUlBLE1BQU0sR0FBSSxVQUFRLFNBQUtBLE1BQU0sSUFBSyxVQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJQyxDQUFDLElBQUlILENBQUMsRUFBRSxJQUFJSSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLENBQUMsRUFBRUcsQ0FBQyxDQUFDLElBQUlGLENBQUMsQ0FBQ08sT0FBTyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9FRCxDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNHLENBQUMsQ0FBQztFQUNmLElBQUlILENBQUMsSUFBSSxJQUFJLElBQUksT0FBT0ksTUFBTSxDQUFDSyxxQkFBcUIsS0FBSyxVQUFVLEVBQy9ELEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRVAsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFxQixDQUFDVCxDQUFDLENBQUMsRUFBRVUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsSUFBSVQsQ0FBQyxDQUFDTyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUlOLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxDQUFDLEVBQUVHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUMsRUFDMUVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFDLENBQUMsQ0FBQyxHQUFHVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBQyxDQUFDLENBQUM7RUFDekI7RUFDSixPQUFPUixDQUFDO0FBQ1osQ0FBQztBQUtELElBQU1XLGFBQWEsR0FBRyxTQUFoQkEsYUFBYSxDQUFJQyxFQUFFLEVBQUs7RUFDMUIsSUFBTUMsVUFBVSxHQUEwQ0QsRUFBRSxDQUF0REMsVUFBVTtJQUFFQyxtQkFBbUIsR0FBcUJGLEVBQUUsQ0FBMUNFLG1CQUFtQjtJQUFFQyxjQUFjLEdBQUtILEVBQUUsQ0FBckJHLGNBQWM7SUFBU0MsS0FBSyxHQUFHbkIsTUFBTSxDQUFDZSxFQUFFLEVBQUUsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztFQUN6SSxPQUFRLHFCQUFDLGNBQUs7SUFBQyxrQkFBa0IsRUFBRTtFQUFNLEdBQUtJLEtBQUs7SUFBRSxVQUFVLEVBQUVDLHVCQUFVLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxNQUFNLENBQUNDLEtBQUssRUFBRVAsVUFBVSxDQUFDLENBQUU7SUFBQyxtQkFBbUIsRUFBRUksdUJBQVUsQ0FBQ0MsT0FBTyxDQUFDLENBQ2pKQyxNQUFNLENBQUNFLGNBQWMsRUFDckJQLG1CQUFtQixDQUN0QixDQUFFO0lBQUMsY0FBYyxFQUFFRyx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0MsTUFBTSxDQUFDRyxTQUFTLEVBQUVQLGNBQWMsQ0FBQztFQUFFLEdBQUU7QUFDckYsQ0FBQztBQUNELElBQU1JLE1BQU0sR0FBR0YsdUJBQVUsQ0FBQ00sTUFBTSxDQUFDO0VBQzdCRCxTQUFTLEVBQUU7SUFDUEUsSUFBSSxFQUFFLENBQUM7SUFDUEMsWUFBWSxFQUFFO0VBQ2xCLENBQUM7RUFDREosY0FBYyxFQUFFO0lBQ1pHLElBQUksRUFBRSxDQUFDO0lBQ1BFLGlCQUFpQixFQUFFLENBQUM7SUFDcEJDLEtBQUssRUFBRSxJQUFJO0lBQ1hDLE1BQU0sRUFBRTtFQUNaLENBQUM7RUFDRFIsS0FBSyxFQUFFO0lBQ0hJLElBQUksRUFBRSxDQUFDO0lBQ1BLLFNBQVMsRUFBRSxPQUFPO0lBQ2xCRixLQUFLLEVBQUUsSUFBSTtJQUNYQyxNQUFNLEVBQUU7RUFDWjtBQUNKLENBQUMsQ0FBQztBQUFDLGVBQ1ksSUFBQUUsaUJBQVMsRUFBQ25CLGFBQWEsRUFBRSxlQUFlLENBQUM7QUFBQSJ9