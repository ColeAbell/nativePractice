d45e62cc0cdbacc45d940dd88c9dd385
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Icon = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _getIconType = _interopRequireDefault(require("../helpers/getIconType"));
var _getIconStyle = _interopRequireDefault(require("../helpers/getIconStyle"));
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Icon = function Icon(props) {
  var _a, _b;
  var _props$type = props.type,
    type = _props$type === void 0 ? 'material' : _props$type,
    name = props.name,
    _props$size = props.size,
    size = _props$size === void 0 ? 24 : _props$size,
    colorProp = props.color,
    iconStyle = props.iconStyle,
    iconProps = props.iconProps,
    _props$underlayColor = props.underlayColor,
    underlayColor = _props$underlayColor === void 0 ? 'transparent' : _props$underlayColor,
    _props$reverse = props.reverse,
    reverse = _props$reverse === void 0 ? false : _props$reverse,
    _props$raised = props.raised,
    raised = _props$raised === void 0 ? false : _props$raised,
    containerStyle = props.containerStyle,
    reverseColorProp = props.reverseColor,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    disabledStyle = props.disabledStyle,
    onPress = props.onPress,
    _props$Component = props.Component,
    Component = _props$Component === void 0 ? onPress ? _reactNative.Platform.select({
      android: _reactNative.TouchableNativeFeedback,
      default: _reactNative.TouchableHighlight
    }) : _reactNative.View : _props$Component,
    _props$solid = props.solid,
    solid = _props$solid === void 0 ? false : _props$solid,
    _props$brand = props.brand,
    brand = _props$brand === void 0 ? false : _props$brand,
    theme = props.theme,
    attributes = __rest(props, ["type", "name", "size", "color", "iconStyle", "iconProps", "underlayColor", "reverse", "raised", "containerStyle", "reverseColor", "disabled", "disabledStyle", "onPress", "Component", "solid", "brand", "theme"]);
  var color = colorProp || ((_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.black);
  var reverseColor = reverseColorProp || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.white);
  var IconComponent = (0, _getIconType.default)(type);
  var iconSpecificStyle = (0, _getIconStyle.default)(type, {
    solid: solid,
    brand: brand
  });
  var getBackgroundColor = function getBackgroundColor() {
    var _a;
    if (reverse) {
      return color;
    }
    return raised ? (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white : 'transparent';
  };
  var buttonStyles = {
    borderRadius: size + 4,
    height: size * 2 + 4,
    width: size * 2 + 4
  };
  if (_reactNative.Platform.OS === 'android' && !attributes.background) {
    if (_reactNative.Platform.Version >= 21) {
      attributes.background = _reactNative.TouchableNativeFeedback.Ripple((0, _color.default)(color).alpha(0.2).rgb().string(), true);
    }
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.container, (reverse || raised) && styles.button, (reverse || raised) && buttonStyles, raised && styles.raised, iconStyle && iconStyle.borderRadius ? {
      borderRadius: iconStyle.borderRadius
    } : {}, containerStyle && containerStyle]),
    children: (0, _jsxRuntime.jsx)(Component, Object.assign({}, attributes, onPress && {
      onPress: onPress,
      disabled: disabled,
      underlayColor: reverse ? color : underlayColor,
      activeOpacity: 0.3
    }, {
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([(reverse || raised) && buttonStyles, {
          backgroundColor: getBackgroundColor(),
          alignItems: 'center',
          justifyContent: 'center'
        }, disabled && styles.disabled, disabled && disabledStyle]),
        children: (0, _jsxRuntime.jsx)(IconComponent, Object.assign({
          testID: "iconIcon",
          style: _reactNative.StyleSheet.flatten([{
            backgroundColor: 'transparent'
          }, iconStyle && iconStyle]),
          size: size,
          name: name,
          color: reverse ? reverseColor : color
        }, iconSpecificStyle, iconProps))
      })
    }))
  });
};
exports.Icon = Icon;
var styles = _reactNative.StyleSheet.create({
  container: {
    overflow: 'hidden'
  },
  button: {
    margin: 7
  },
  raised: Object.assign({}, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    }
  })),
  disabled: {
    backgroundColor: '#D1D5D8'
  }
});
var _default = (0, _config.withTheme)(Icon, 'Icon');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,